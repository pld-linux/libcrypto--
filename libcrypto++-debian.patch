--- libcrypto++-5.5.2.orig/debian/libcrypto++-dev.install
+++ libcrypto++-5.5.2/debian/libcrypto++-dev.install
@@ -0,0 +1,3 @@
+usr/include/crypto--/*.h usr/include/crypto++
+usr/lib/*.{a,la,so}
+usr/lib/pkgconfig/*.pc
--- libcrypto++-5.5.2.orig/debian/config.h.in
+++ libcrypto++-5.5.2/debian/config.h.in
@@ -0,0 +1,447 @@
+#ifndef CRYPTOPP_CONFIG_H
+#define CRYPTOPP_CONFIG_H
+
+// ***************** Important Settings ********************
+
+// Endianness
+#undef IS_BIG_ENDIAN
+#undef IS_LITTLE_ENDIAN
+
+// define this if you want to disable all OS-dependent features,
+// such as sockets and OS-provided random number generators
+// #define NO_OS_DEPENDENCE
+
+// Define this to use features provided by Microsoft's CryptoAPI.
+// Currently the only feature used is random number generation.
+// This macro will be ignored if NO_OS_DEPENDENCE is defined.
+#define USE_MS_CRYPTOAPI
+
+// Define this to 1 to enforce the requirement in FIPS 186-2 Change Notice 1 that only 1024 bit moduli be used
+#ifndef DSA_1024_BIT_MODULUS_ONLY
+#	define DSA_1024_BIT_MODULUS_ONLY 1
+#endif
+
+// ***************** Less Important Settings ***************
+
+// define this to retain (as much as possible) old deprecated function and class names
+// #define CRYPTOPP_MAINTAIN_BACKWARDS_COMPATIBILITY
+
+#define GZIP_OS_CODE 0
+
+// Try this if your CPU has 256K internal cache or a slow multiply instruction
+// and you want a (possibly) faster IDEA implementation using log tables
+// #define IDEA_LARGECACHE
+
+// Define this if, for the linear congruential RNG, you want to use
+// the original constants as specified in S.K. Park and K.W. Miller's
+// CACM paper.
+// #define LCRNG_ORIGINAL_NUMBERS
+
+// choose which style of sockets to wrap (mostly useful for cygwin which has both)
+#define PREFER_BERKELEY_STYLE_SOCKETS
+// #define PREFER_WINDOWS_STYLE_SOCKETS
+
+// set the name of Rijndael cipher, was "Rijndael" before version 5.3
+#define CRYPTOPP_RIJNDAEL_NAME "AES"
+
+// ***************** Important Settings Again ********************
+// But the defaults should be ok.
+
+// namespace support is now required
+#ifdef NO_NAMESPACE
+#	error namespace support is now required
+#endif
+
+// Define this to workaround a Microsoft CryptoAPI bug where
+// each call to CryptAcquireContext causes a 100 KB memory leak.
+// Defining this will cause Crypto++ to make only one call to CryptAcquireContext.
+#define WORKAROUND_MS_BUG_Q258000
+
+#ifdef CRYPTOPP_DOXYGEN_PROCESSING
+// Avoid putting "CryptoPP::" in front of everything in Doxygen output
+#	define CryptoPP
+#	define NAMESPACE_BEGIN(x)
+#	define NAMESPACE_END
+// Get Doxygen to generate better documentation for these typedefs
+#	define DOCUMENTED_TYPEDEF(x, y) class y : public x {};
+#else
+#	define NAMESPACE_BEGIN(x) namespace x {
+#	define NAMESPACE_END }
+#	define DOCUMENTED_TYPEDEF(x, y) typedef x y;
+#endif
+#define ANONYMOUS_NAMESPACE_BEGIN namespace {
+#define USING_NAMESPACE(x) using namespace x;
+#define DOCUMENTED_NAMESPACE_BEGIN(x) namespace x {
+#define DOCUMENTED_NAMESPACE_END }
+
+// What is the type of the third parameter to bind?
+// For Unix, the new standard is ::socklen_t (typically unsigned int), and the old standard is int.
+// Unfortunately there is no way to tell whether or not socklen_t is defined.
+// To work around this, TYPE_OF_SOCKLEN_T is a macro so that you can change it from the makefile.
+#ifndef TYPE_OF_SOCKLEN_T
+#	if defined(_WIN32) || defined(__CYGWIN__)
+#		define TYPE_OF_SOCKLEN_T int
+#	else
+#		define TYPE_OF_SOCKLEN_T ::socklen_t
+#	endif
+#endif
+
+#if defined(__CYGWIN__) && defined(PREFER_WINDOWS_STYLE_SOCKETS)
+#	define __USE_W32_SOCKETS
+#endif
+
+typedef unsigned char byte;		// put in global namespace to avoid ambiguity with other byte typedefs
+
+NAMESPACE_BEGIN(CryptoPP)
+
+typedef unsigned short word16;
+typedef unsigned int word32;
+
+#if defined(__GNUC__) || defined(__MWERKS__) || defined(__SUNPRO_CC)
+	#define WORD64_AVAILABLE
+	typedef unsigned long long word64;
+	#define W64LIT(x) x##LL
+#elif defined(_MSC_VER) || defined(__BORLANDC__)
+	#define WORD64_AVAILABLE
+	typedef unsigned __int64 word64;
+	#define W64LIT(x) x##ui64
+#endif
+
+// define large word type, used for file offsets and such
+#ifdef WORD64_AVAILABLE
+	typedef word64 lword;
+	const lword LWORD_MAX = W64LIT(0xffffffffffffffff);
+#else
+	typedef word32 lword;
+	const lword LWORD_MAX = 0xffffffffUL;
+#endif
+
+// define hword, word, and dword. these are used for multiprecision integer arithmetic
+// Intel compiler won't have _umul128 until version 10.0. See http://softwarecommunity.intel.com/isn/Community/en-US/forums/thread/30231625.aspx
+#if (defined(_MSC_VER) && (!defined(__INTEL_COMPILER) || __INTEL_COMPILER >= 1000) && (defined(_M_X64) || defined(_M_IA64))) || (defined(__DECCXX) && defined(__alpha__)) || (defined(__INTEL_COMPILER) && defined(__x86_64__))
+	typedef word32 hword;
+	typedef word64 word;
+#else
+	#define CRYPTOPP_NATIVE_DWORD_AVAILABLE
+	#if defined(__alpha__) || defined(__ia64__) || defined(_ARCH_PPC64) || defined(__x86_64__) || defined(__mips64) || defined(__sparc64__)
+		#if defined(__GNUC__) && !defined(__INTEL_COMPILER)
+			typedef word32 hword;
+			typedef word64 word;
+			typedef __uint128_t dword;
+			typedef __uint128_t word128;
+			#define CRYPTOPP_WORD128_AVAILABLE
+		#else
+			// if we're here, it means we're on a 64-bit CPU but we don't have a way to obtain 128-bit multiplication results
+			typedef word16 hword;
+			typedef word32 word;
+			typedef word64 dword;
+		#endif
+	#elif defined(WORD64_AVAILABLE)
+		#define CRYPTOPP_SLOW_WORD64 // use alternative code that avoids word64
+		typedef word16 hword;
+		typedef word32 word;
+		typedef word64 dword;
+	#else
+		typedef byte hword;
+		typedef word16 word;
+		typedef word32 dword;
+	#endif
+#endif
+
+const unsigned int WORD_SIZE = sizeof(word);
+const unsigned int WORD_BITS = WORD_SIZE * 8;
+
+NAMESPACE_END
+
+#ifndef CRYPTOPP_L1_CACHE_LINE_SIZE
+	// This should be a lower bound on the L1 cache line size. It's used for defense against timing attacks.
+	#if defined(_M_X64) || defined(__x86_64__)
+		#define CRYPTOPP_L1_CACHE_LINE_SIZE 64
+	#else
+		// L1 cache line size is 32 on Pentium III and earlier
+		#define CRYPTOPP_L1_CACHE_LINE_SIZE 32
+	#endif
+#endif
+
+#if defined(_MSC_VER)
+	#if _MSC_VER == 1200
+		#include <malloc.h>
+	#endif
+	#if _MSC_VER > 1200 || defined(_mm_free)
+		#define CRYPTOPP_MSVC6PP_OR_LATER		// VC 6 processor pack or later
+	#else
+		#define CRYPTOPP_MSVC6_NO_PP			// VC 6 without processor pack
+	#endif
+#endif
+
+#ifdef __GNUC__
+	#define CRYPTOPP_GCC_VERSION (__GNUC__ * 10000 + __GNUC_MINOR__ * 100 + __GNUC_PATCHLEVEL__)
+#endif
+
+#ifndef CRYPTOPP_ALIGN_DATA
+	#if defined(CRYPTOPP_MSVC6PP_OR_LATER)
+		#define CRYPTOPP_ALIGN_DATA(x) __declspec(align(x))
+	#elif defined(__GNUC__) || __SUNPRO_CC > 0x580
+		#define CRYPTOPP_ALIGN_DATA(x) __attribute__((aligned(x)))
+	#else
+		#define CRYPTOPP_ALIGN_DATA(x)
+	#endif
+#endif
+
+#ifndef CRYPTOPP_SECTION_ALIGN16
+	#if defined(__GNUC__) && !defined(__APPLE__)
+		// the alignment attribute doesn't seem to work without this section attribute when -fdata-sections is turned on
+		#define CRYPTOPP_SECTION_ALIGN16 __attribute__((section ("CryptoPP_Align16")))
+	#else
+		#define CRYPTOPP_SECTION_ALIGN16
+	#endif
+#endif
+
+#if defined(_MSC_VER) || defined(__fastcall)
+	#define CRYPTOPP_FASTCALL __fastcall
+#else
+	#define CRYPTOPP_FASTCALL
+#endif
+
+// VC60 workaround: it doesn't allow typename in some places
+#if defined(_MSC_VER) && (_MSC_VER < 1300)
+#define CPP_TYPENAME
+#else
+#define CPP_TYPENAME typename
+#endif
+
+// VC60 workaround: can't cast unsigned __int64 to float or double
+#if defined(_MSC_VER) && !defined(CRYPTOPP_MSVC6PP_OR_LATER)
+#define CRYPTOPP_VC6_INT64 (__int64)
+#else
+#define CRYPTOPP_VC6_INT64
+#endif
+
+#ifdef _MSC_VER
+#define CRYPTOPP_NO_VTABLE __declspec(novtable)
+#else
+#define CRYPTOPP_NO_VTABLE
+#endif
+
+#ifdef _MSC_VER
+	// 4231: nonstandard extension used : 'extern' before template explicit instantiation
+	// 4250: dominance
+	// 4251: member needs to have dll-interface
+	// 4275: base needs to have dll-interface
+	// 4660: explicitly instantiating a class that's already implicitly instantiated
+	// 4661: no suitable definition provided for explicit template instantiation request
+	// 4786: identifer was truncated in debug information
+	// 4355: 'this' : used in base member initializer list
+	// 4910: '__declspec(dllexport)' and 'extern' are incompatible on an explicit instantiation
+#	pragma warning(disable: 4231 4250 4251 4275 4660 4661 4786 4355 4910)
+#endif
+
+#ifdef __BORLANDC__
+// 8037: non-const function called for const object. needed to work around BCB2006 bug
+#	pragma warn -8037
+#endif
+
+#if (defined(_MSC_VER) && _MSC_VER <= 1300) || defined(__MWERKS__) || defined(_STLPORT_VERSION)
+#define CRYPTOPP_DISABLE_UNCAUGHT_EXCEPTION
+#endif
+
+#ifndef CRYPTOPP_DISABLE_UNCAUGHT_EXCEPTION
+#define CRYPTOPP_UNCAUGHT_EXCEPTION_AVAILABLE
+#endif
+
+#ifdef CRYPTOPP_DISABLE_X86ASM		// for backwards compatibility: this macro had both meanings
+#define CRYPTOPP_DISABLE_ASM
+#define CRYPTOPP_DISABLE_SSE2
+#endif
+
+#if !defined(CRYPTOPP_DISABLE_ASM) && ((defined(_MSC_VER) && defined(_M_IX86)) || (defined(__GNUC__) && (defined(__i386__) || defined(__x86_64__))))
+	#define CRYPTOPP_X86_ASM_AVAILABLE
+
+	#if !defined(CRYPTOPP_DISABLE_SSE2) && (defined(CRYPTOPP_MSVC6PP_OR_LATER) || CRYPTOPP_GCC_VERSION >= 30300)
+		#define CRYPTOPP_BOOL_SSE2_ASM_AVAILABLE 1
+	#else
+		#define CRYPTOPP_BOOL_SSE2_ASM_AVAILABLE 0
+	#endif
+
+	// SSSE3 was actually introduced in GNU as 2.17, which was released 6/23/2006, but we can't tell what version of binutils is installed.
+	// GCC 4.1.2 was released on 2/13/2007, so we'll use that as a proxy for the binutils version.
+	#if !defined(CRYPTOPP_DISABLE_SSSE3) && (_MSC_VER >= 1400 || CRYPTOPP_GCC_VERSION >= 40102)
+		#define CRYPTOPP_BOOL_SSSE3_ASM_AVAILABLE 1
+	#else
+		#define CRYPTOPP_BOOL_SSSE3_ASM_AVAILABLE 0
+	#endif
+#endif
+
+#if !defined(CRYPTOPP_DISABLE_ASM) && defined(_MSC_VER) && defined(_M_X64)
+	#define CRYPTOPP_X64_MASM_AVAILABLE
+#endif
+
+#if !defined(CRYPTOPP_DISABLE_ASM) && defined(__GNUC__) && defined(__x86_64__)
+	#define CRYPTOPP_X64_ASM_AVAILABLE
+#endif
+
+#if !defined(CRYPTOPP_DISABLE_SSE2) && (defined(CRYPTOPP_MSVC6PP_OR_LATER) || defined(__SSE2__))
+	#define CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE 1
+#else
+	#define CRYPTOPP_BOOL_SSE2_INTRINSICS_AVAILABLE 0
+#endif
+
+// how to allocate 16-byte aligned memory (for SSE2)
+#if defined(CRYPTOPP_MSVC6PP_OR_LATER)
+	#define CRYPTOPP_MM_MALLOC_AVAILABLE
+#elif defined(__FreeBSD__) || defined(__NetBSD__) || defined(__OpenBSD__)
+	#define CRYPTOPP_MALLOC_ALIGNMENT_IS_16
+#elif defined(__linux__) || defined(__sun__) || defined(__CYGWIN__)
+	#define CRYPTOPP_MEMALIGN_AVAILABLE
+#else
+	#define CRYPTOPP_NO_ALIGNED_ALLOC
+#endif
+
+// how to disable inlining
+#if defined(_MSC_VER) && _MSC_VER >= 1300
+#	define CRYPTOPP_NOINLINE_DOTDOTDOT
+#	define CRYPTOPP_NOINLINE __declspec(noinline)
+#elif defined(__GNUC__)
+#	define CRYPTOPP_NOINLINE_DOTDOTDOT
+#	define CRYPTOPP_NOINLINE __attribute__((noinline))
+#else
+#	define CRYPTOPP_NOINLINE_DOTDOTDOT ...
+#	define CRYPTOPP_NOINLINE 
+#endif
+
+// how to declare class constants
+#if defined(_MSC_VER) && _MSC_VER <= 1300
+#	define CRYPTOPP_CONSTANT(x) enum {x};
+#else
+#	define CRYPTOPP_CONSTANT(x) static const int x;
+#endif
+
+#if defined(_M_X64) || defined(__x86_64__)
+	#define CRYPTOPP_BOOL_X64 1
+#else
+	#define CRYPTOPP_BOOL_X64 0
+#endif
+
+// see http://predef.sourceforge.net/prearch.html
+#if defined(_M_IX86) || defined(__i386__) || defined(__i386) || defined(_X86_) || defined(__I86__) || defined(__INTEL__)
+	#define CRYPTOPP_BOOL_X86 1
+#else
+	#define CRYPTOPP_BOOL_X86 0
+#endif
+
+#if CRYPTOPP_BOOL_X64 || CRYPTOPP_BOOL_X86
+	#define CRYPTOPP_ALLOW_UNALIGNED_DATA_ACCESS
+#endif
+
+#define CRYPTOPP_VERSION 552
+
+// ***************** determine availability of OS features ********************
+
+#ifndef NO_OS_DEPENDENCE
+
+#if defined(_WIN32) || defined(__CYGWIN__)
+#define CRYPTOPP_WIN32_AVAILABLE
+#endif
+
+#if defined(__unix__) || defined(__MACH__) || defined(__NetBSD__) || defined(__sun)
+#define CRYPTOPP_UNIX_AVAILABLE
+#endif
+
+#if defined(WORD64_AVAILABLE) && (defined(CRYPTOPP_WIN32_AVAILABLE) || defined(CRYPTOPP_UNIX_AVAILABLE))
+#	define HIGHRES_TIMER_AVAILABLE
+#endif
+
+#ifdef CRYPTOPP_UNIX_AVAILABLE
+#	define HAS_BERKELEY_STYLE_SOCKETS
+#endif
+
+#ifdef CRYPTOPP_WIN32_AVAILABLE
+#	define HAS_WINDOWS_STYLE_SOCKETS
+#endif
+
+#if defined(HIGHRES_TIMER_AVAILABLE) && (defined(HAS_BERKELEY_STYLE_SOCKETS) || defined(HAS_WINDOWS_STYLE_SOCKETS))
+#	define SOCKETS_AVAILABLE
+#endif
+
+#if defined(HAS_WINDOWS_STYLE_SOCKETS) && (!defined(HAS_BERKELEY_STYLE_SOCKETS) || defined(PREFER_WINDOWS_STYLE_SOCKETS))
+#	define USE_WINDOWS_STYLE_SOCKETS
+#else
+#	define USE_BERKELEY_STYLE_SOCKETS
+#endif
+
+#if defined(HIGHRES_TIMER_AVAILABLE) && defined(CRYPTOPP_WIN32_AVAILABLE) && !defined(USE_BERKELEY_STYLE_SOCKETS)
+#	define WINDOWS_PIPES_AVAILABLE
+#endif
+
+#if defined(CRYPTOPP_WIN32_AVAILABLE) && defined(USE_MS_CRYPTOAPI)
+#	define NONBLOCKING_RNG_AVAILABLE
+#	define OS_RNG_AVAILABLE
+#endif
+
+#if defined(CRYPTOPP_UNIX_AVAILABLE) || defined(CRYPTOPP_DOXYGEN_PROCESSING)
+#	define NONBLOCKING_RNG_AVAILABLE
+#	define BLOCKING_RNG_AVAILABLE
+#	define OS_RNG_AVAILABLE
+#	define HAS_PTHREADS
+#	define THREADS_AVAILABLE
+#endif
+
+#ifdef CRYPTOPP_WIN32_AVAILABLE
+#	define HAS_WINTHREADS
+#	define THREADS_AVAILABLE
+#endif
+
+#endif	// NO_OS_DEPENDENCE
+
+// ***************** DLL related ********************
+
+#ifdef CRYPTOPP_WIN32_AVAILABLE
+
+#ifdef CRYPTOPP_EXPORTS
+#define CRYPTOPP_IS_DLL
+#define CRYPTOPP_DLL __declspec(dllexport)
+#elif defined(CRYPTOPP_IMPORTS)
+#define CRYPTOPP_IS_DLL
+#define CRYPTOPP_DLL __declspec(dllimport)
+#else
+#define CRYPTOPP_DLL
+#endif
+
+#define CRYPTOPP_API __cdecl
+
+#else	// CRYPTOPP_WIN32_AVAILABLE
+
+#define CRYPTOPP_DLL
+#define CRYPTOPP_API
+
+#endif	// CRYPTOPP_WIN32_AVAILABLE
+
+#if defined(__MWERKS__)
+#define CRYPTOPP_EXTERN_DLL_TEMPLATE_CLASS extern class CRYPTOPP_DLL
+#elif defined(__BORLANDC__) || defined(__SUNPRO_CC)
+#define CRYPTOPP_EXTERN_DLL_TEMPLATE_CLASS template class CRYPTOPP_DLL
+#else
+#define CRYPTOPP_EXTERN_DLL_TEMPLATE_CLASS extern template class CRYPTOPP_DLL
+#endif
+
+#if defined(CRYPTOPP_MANUALLY_INSTANTIATE_TEMPLATES) && !defined(CRYPTOPP_IMPORTS)
+#define CRYPTOPP_DLL_TEMPLATE_CLASS template class CRYPTOPP_DLL
+#else
+#define CRYPTOPP_DLL_TEMPLATE_CLASS CRYPTOPP_EXTERN_DLL_TEMPLATE_CLASS
+#endif
+
+#if defined(__MWERKS__)
+#define CRYPTOPP_EXTERN_STATIC_TEMPLATE_CLASS extern class
+#elif defined(__BORLANDC__) || defined(__SUNPRO_CC)
+#define CRYPTOPP_EXTERN_STATIC_TEMPLATE_CLASS template class
+#else
+#define CRYPTOPP_EXTERN_STATIC_TEMPLATE_CLASS extern template class
+#endif
+
+#if defined(CRYPTOPP_MANUALLY_INSTANTIATE_TEMPLATES) && !defined(CRYPTOPP_EXPORTS)
+#define CRYPTOPP_STATIC_TEMPLATE_CLASS template class
+#else
+#define CRYPTOPP_STATIC_TEMPLATE_CLASS CRYPTOPP_EXTERN_STATIC_TEMPLATE_CLASS
+#endif
+
+#endif
--- libcrypto++-5.5.2.orig/debian/cryptest.1
+++ libcrypto++-5.5.2/debian/cryptest.1
@@ -0,0 +1,95 @@
+.TH cryptest 1 local
+.SH NAME
+cryptest \- Test Driver for Crypto++, a C++ Class Library of Cryptographic Primitives
+.SH SYNOPSIS
+.B cryptest 
+[\fIOPTION\fR]
+.SH DESCRIPTION
+cryptest takes the following options
+.TP
+.B g
+generate an RSA key
+.TP
+.B h
+display usage information
+.TP
+.B r
+encrypt and decrypt a string using RSA
+.TP
+.BI rs " privatekeyfile messagefile signaturefile"
+sign a file using RSA
+.TP
+.BI rv " publickeyfile messagefile signaturefile"
+verify a signature of a file using RSA
+.TP
+.BI m " file"
+calculate MD5, SHA, and RIPEMD-160 message digests
+.TP
+.B t
+encrypt and decrypt a string using DES-EDE in CBC mode 
+.TP
+.BI e|d " input output"
+encrypt or decrypt a file
+.TP
+.BI ss " <threshold> <number-of-shares> file"
+secret share a file (shares will be named file.000, file.001, etc)
+.TP
+.BI sr " file share1 share2 [....]"
+reconstruct a secret-shared file (number of shares given must be equal
+to threshold)
+.TP
+.BI id " <threshold> <number-of-shares> file"
+information disperse a file (shares will be named file.000, file.001, etc)
+.TP
+.BI ir " file share1 share2 [....]"
+reconstruct an information-dispersed file (number of shares given must
+be equal to threshold)
+.TP
+.BI z " <compression-level> input output"
+gzip a file
+.TP
+.BI u " input output"
+gunzip a file
+.TP
+.BI ae " input output"
+encrypt a file with AES in CTR mode
+.TP
+.BI e64 " input output"
+base64 encode a file
+.TP
+.BI d64 " input output"
+base64 decode a file
+.TP
+.BI e16 " input output"
+hex encode a file
+.TP
+.BI d16 " input output"
+hex decode a file
+.TP
+.BI ft " source-port destination-host destination-port"
+forward a TCP connection
+.TP
+.BI fips
+run the FIPS 140-2 sample application
+.TP
+.BI fips-rand
+generate 100000 random files using FIPS Approved X.917 RNG
+.TP
+.BI mt " input"
+run Maurer's randomness test on a file
+.TP
+.B v
+run validation tests
+.TP
+.B V
+display version number
+.TP
+.BI b " [time for each benchmark in seconds] [frequency of CPU in gigahertz]"
+run benchmarks
+.TP
+.BI tv " filename"
+run test vector file (available in TestVectors example subdirectory)
+.SH AUTHOR
+This man page was created by Stephen Zander, Pierre Machard and Jens
+Peter Secher for the Debian distribution.  It is licenced under the
+same terms as the rest of the Crypto++ library, written by Wei Dai.
--- libcrypto++-5.5.2.orig/debian/libcrypto++.pc.in
+++ libcrypto++-5.5.2/debian/libcrypto++.pc.in
@@ -0,0 +1,12 @@
+prefix=@prefix@
+exec_prefix=@exec_prefix@
+libdir=@libdir@
+includedir=@includedir@
+
+Name: libcrypto++
+Description: General purpose cryptographic shared library
+URL: http://www.cryptopp.com
+Version: @VERSION@
+Requires:
+Libs: -lcrypto++
+Cflags:
--- libcrypto++-5.5.2.orig/debian/compat
+++ libcrypto++-5.5.2/debian/compat
@@ -0,0 +1 @@
+5
--- libcrypto++-5.5.2.orig/debian/rules
+++ libcrypto++-5.5.2/debian/rules
@@ -0,0 +1,138 @@
+#!/usr/bin/make -f
+# debian/rules for libcrypto++.
+# Written by Jens Peter Secher <jps@debian.org>.
+
+# The shared library must be the first listed in debian/control.
+package := $(firstword $(shell dh_listpackages))
+
+binarypackages := $(filter-out %-doc,$(shell dh_listpackages))
+
+# Use dpatch.
+include /usr/share/dpatch/dpatch.make
+
+# Setup ./configure arguments to fit Debian environment.
+export DEB_HOST_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_HOST_GNU_TYPE)
+export DEB_HOST_ARCH_OS ?= $(shell dpkg-architecture -qDEB_HOST_ARCH_OS)
+export DEB_BUILD_GNU_TYPE ?= $(shell dpkg-architecture -qDEB_BUILD_GNU_TYPE)
+config_flags := \
+	--config-cache \
+	--enable-debug \
+	--prefix=/usr \
+	--sysconfdir=/etc \
+	--mandir=/usr/share/man \
+	--infodir=/usr/share/info \
+	--libexecdir=/usr/lib \
+	--build $(DEB_BUILD_GNU_TYPE)
+ifneq ($(DEB_BUILD_GNU_TYPE), $(DEB_HOST_GNU_TYPE))
+	config_flags += --host $(DEB_HOST_GNU_TYPE)
+endif
+
+# General compile options.
+cflags := -DNDEBUG -DCRYPTOPP_DISABLE_ASM -g -fno-strict-aliasing -pipe
+ifeq (,$(findstring noopt,$(DEB_BUILD_OPTIONS)))
+	cflags += -O2
+else
+	cflags += -O0
+endif
+# Architecture-specific compile options.
+ifeq (hppa-linux,$(DEB_BUILD_GNU_TYPE))
+	cflags += -ffunction-sections
+endif
+
+# Hurd does not have POSIX threads.
+ifneq (hurd,$(DEB_HOST_ARCH_OS))
+	export LDFLAGS=-pthread
+endif
+
+autotools_input := configure.ac Makefile.am config.h.in libcrypto++.pc.in
+
+autoclean:
+	-rm -f a.out aclocal.m4 config.log config.sub config.guess	\
+	configure cryptopp_config.h.in depcomp install-sh ltmain.sh	\
+	Makefile.in missing libcrypto++.pc $(autotools_input)
+
+clean-patched:
+	dh_testdir
+	dh_testroot
+	-rm -f $(CURDIR)/*-stamp
+	[ ! -f Makefile ] || $(MAKE) distclean
+	-rm -rf $(CURDIR)/doc
+	dh_clean
+
+clean: clean-patched unpatch autoclean
+
+# Autoreconf needs the automake input to be Makefile.am, so we make
+# sure the upstream GNUmakefile do not shadow the resulting Makefile.
+config-stamp:
+	dh_testdir
+	ln -sf /usr/share/misc/config.sub /usr/share/misc/config.guess .
+	-rm -f config.cache GNUmakefile
+	cp -f $(patsubst %,debian/%,$(autotools_input)) .
+	AUTOMAKE=automake-1.10 ACLOCAL=aclocal-1.10 autoreconf --force --install
+	$(SHELL) ./configure $(config_flags) CFLAGS="$(cflags)" CXXFLAGS="$(cflags)"
+	touch $@
+
+# Build and run the test suite.
+build: config-stamp build-stamp
+build-stamp: patch-stamp
+	$(MAKE)
+	$(CURDIR)/cryptestcwd v
+	touch $@
+
+# Let Doxygen generate the documentation.
+html: config-stamp html-stamp
+html-stamp: patch-stamp
+	$(MAKE) html
+	touch $@
+
+# Put everything of interest in debian/tmp.
+destdir=$(CURDIR)/debian/tmp
+
+install-stamp: build
+	dh_testdir
+	dh_testroot
+	dh_clean -k
+	$(MAKE) install DESTDIR=$(destdir)
+	rm -f $(destdir)/usr/bin/cryptestcwd
+	cp -r $(CURDIR)/TestVectors $(destdir)/usr/share/crypto--
+	mkdir $(destdir)/usr/lib/pkgconfig
+	cp -r $(CURDIR)/*.pc $(destdir)/usr/lib/pkgconfig
+	touch $@
+
+binary-indep: html
+	dh_testdir
+	dh_testroot
+	dh_installdocs -plibcrypto++-doc -X.hhc -X.hhp -X.hhk
+	dh_installchangelogs -plibcrypto++-doc 
+	dh_compress -plibcrypto++-doc 
+	dh_fixperms -plibcrypto++-doc 
+	dh_installdeb -plibcrypto++-doc 
+	dh_gencontrol -plibcrypto++-doc 
+	dh_md5sums -plibcrypto++-doc 
+	dh_builddeb -plibcrypto++-doc 
+
+binaryargs := $(patsubst %,-p%,$(binarypackages))
+
+binary-arch: install-stamp
+	dh_testdir
+	dh_testroot
+	dh_installdocs $(binaryargs)
+	dh_install --list-missing --sourcedir=$(destdir) $(binaryargs)
+	dh_link $(binaryargs)
+	dh_installchangelogs $(binaryargs)
+	dh_installman -plibcrypto++-utils debian/cryptest.1
+	dh_installexamples -plibcrypto++-dev test.cpp
+	dh_strip $(binaryargs)
+	dh_compress $(binaryargs)
+	dh_fixperms $(binaryargs)
+	dh_makeshlibs $(binaryargs)
+	dh_installdeb $(binaryargs)
+	dh_shlibdeps -L$(package) -ldebian/$(package)/usr/lib
+	dh_gencontrol $(binaryargs)
+	dh_md5sums $(binaryargs)
+	dh_builddeb $(binaryargs)
+
+binary: binary-indep binary-arch
+
+.PHONY: autoclean binary binary-indep binary-arch bootstrap build	\
+	clean clean-patched html
--- libcrypto++-5.5.2.orig/debian/control
+++ libcrypto++-5.5.2/debian/control
@@ -0,0 +1,113 @@
+Source: libcrypto++
+Section: libs
+Priority: optional
+Maintainer: Jens Peter Secher <jps@debian.org>
+Standards-Version: 3.7.3
+Build-Depends: g++ (>= 4.1.1), debhelper (>= 5), automake1.10, autoconf (>= 2.59), libtool, dpatch
+Build-Depends-Indep: doxygen
+Homepage: http://www.cryptopp.com
+
+Package: libcrypto++7
+Architecture: any
+Section: libs
+Depends: ${shlibs:Depends}
+Description: General purpose cryptographic shared library
+ General purpose cryptographic library for C++ which includes:
+   A class hierarchy with an API defined by abstract base classes,
+   Proposed AES (Rijndael) and other AES candidates,
+   Other symmetric block ciphers,
+   Generic cipher modes,
+   Stream ciphers,
+   Public key cryptography,
+   Padding schemes for public-key systems,
+   Key agreement schemes,
+   Elliptic curve cryptography,
+   One-way hash functions,
+   Message authentication codes,
+   Cipher constructions based on hash functions,
+   Pseudo-random number generators,
+   High level interface for most of the above using a filter/pipeline metaphor,
+   and a whole lot more.
+
+Package: libcrypto++-dev
+Architecture: any
+Section: libdevel
+Depends: libcrypto++7 (= ${binary:Version})
+Description: General purpose cryptographic C++ library - development
+ General purpose cryptographic C++ library which includes:
+   A class hierarchy with an API defined by abstract base classes,
+   Proposed AES (Rijndael) and other AES candidates,
+   Other symmetric block ciphers,
+   Generic cipher modes,
+   Stream ciphers,
+   Public key cryptography,
+   Padding schemes for public-key systems,
+   Key agreement schemes,
+   Elliptic curve cryptography,
+   One-way hash functions,
+   Message authentication codes,
+   Cipher constructions based on hash functions,
+   Pseudo-random number generators,
+   High level interface for most of the above using a filter/pipeline metaphor,
+   and a whole lot more.
+ .
+ This package contains the header files needed for developing using
+ the Crypto++ class library.  It also includes the static library with
+ libtool supoport, a utility for benchmarking and using the various
+ Crypto++ routines, and finally it includes the test vectors for
+ validating both the Crypto++ implementation and other implementations
+ of these routines.
+
+Package: libcrypto++-utils
+Architecture: any
+Section: utils
+Depends: ${shlibs:Depends}
+Conflicts: libcrypto++-dev (= 5.2.1c2-1)
+Description: General purpose cryptographic library - utilities and data files
+ General purpose cryptographic C++ library which includes:
+   A class hierarchy with an API defined by abstract base classes,
+   Proposed AES (Rijndael) and other AES candidates,
+   Other symmetric block ciphers,
+   Generic cipher modes,
+   Stream ciphers,
+   Public key cryptography,
+   Padding schemes for public-key systems,
+   Key agreement schemes,
+   Elliptic curve cryptography,
+   One-way hash functions,
+   Message authentication codes,
+   Cipher constructions based on hash functions,
+   Pseudo-random number generators,
+   High level interface for most of the above using a filter/pipeline metaphor,
+   and a whole lot more.
+ .
+ This package includes a utility for benchmarking and using the
+ various Crypto++ routines.  It also includes the test vectors for
+ validating both the Crypto++ implementation and other implementations
+ of these routines.
+
+Package: libcrypto++-doc
+Architecture: all
+Section: doc
+Conflicts: libcrypto++-dev (<= 5.2.1c2-3)
+Enhances: libcrypto++-dev
+Description: General purpose cryptographic library - documentation
+ General purpose cryptographic C++ library which includes:
+   A class hierarchy with an API defined by abstract base classes,
+   Proposed AES (Rijndael) and other AES candidates,
+   Other symmetric block ciphers,
+   Generic cipher modes,
+   Stream ciphers,
+   Public key cryptography,
+   Padding schemes for public-key systems,
+   Key agreement schemes,
+   Elliptic curve cryptography,
+   One-way hash functions,
+   Message authentication codes,
+   Cipher constructions based on hash functions,
+   Pseudo-random number generators,
+   High level interface for most of the above using a filter/pipeline metaphor,
+   and a whole lot more.
+ .
+ This package includes the Doxygen-generated reference guide to the
+ source code.
--- libcrypto++-5.5.2.orig/debian/copyright
+++ libcrypto++-5.5.2/debian/copyright
@@ -0,0 +1,108 @@
+This is the Debian GNU/Linux version of the Crypto++ library.
+
+The original source is cryptopp552.zip with sha512sum
+62fa0aa79081b14cc87345c5364182d83cd1bde6ea732bcecc5cae02879d218159b324a0872d6ef70c1b1916cadb2243036918cbcf962f78b84c788c55d7520f
+obtained from http://www.cryptopp.com/.  It was unpacked with unzip -a
+to avoid DOS text format which breaks the test suite, and the
+following files removed: *.dsp *.vcproj *.dsw *.sln *.rc
+cryptlib_bds.* cryptest_bds.* resource.h .
+
+---[ License.txt begin ]---
+
+Compilation Copyright (c) 1995-2006 by Wei Dai.  All rights reserved.
+This copyright applies only to this software distribution package 
+as a compilation, and does not imply a copyright on any particular 
+file in the package.
+
+The following files are copyrighted by their respective original authors,
+and their use is subject to additional licenses included in these files.
+
+mars.cpp - Copyright 1998 Brian Gladman.
+
+All other files in this compilation are placed in the public domain by
+Wei Dai and other contributors.
+
+I would like to thank the following authors for placing their works into
+the public domain:
+
+Joan Daemen - 3way.cpp
+Leonard Janke - cast.cpp, seal.cpp
+Steve Reid - cast.cpp
+Phil Karn - des.cpp
+Michael Paul Johnson - diamond.cpp
+Andrew M. Kuchling - md2.cpp, md4.cpp
+Colin Plumb - md5.cpp, md5mac.cpp
+Seal Woods - rc6.cpp
+Chris Morgan - rijndael.cpp
+Paulo Baretto - rijndael.cpp, skipjack.cpp, square.cpp
+Richard De Moliner - safer.cpp
+Matthew Skala - twofish.cpp
+Kevin Springle - camellia.cpp, shacal2.cpp, ttmac.cpp, whrlpool.cpp, ripemd.cpp
+
+Permission to use, copy, modify, and distribute this compilation for
+any purpose, including commercial applications, is hereby granted
+without fee, subject to the following restrictions:
+
+1. Any copy or modification of this compilation in any form, except
+in object code form as part of an application software, must include
+the above copyright notice and this license.
+
+2. Users of this software agree that any modification or extension
+they provide to Wei Dai will be considered public domain and not
+copyrighted unless it includes an explicit copyright notice.
+
+3. Wei Dai makes no warranty or representation that the operation of the
+software in this compilation will be error-free, and Wei Dai is under no
+obligation to provide any services, by way of maintenance, update, or
+otherwise.  THE SOFTWARE AND ANY DOCUMENTATION ARE PROVIDED "AS IS"
+WITHOUT EXPRESS OR IMPLIED WARRANTY INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE. IN NO EVENT WILL WEI DAI OR ANY OTHER CONTRIBUTOR BE LIABLE FOR
+DIRECT, INCIDENTAL OR CONSEQUENTIAL DAMAGES, EVEN IF
+ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.
+
+4. Users will not use Wei Dai or any other contributor's name in any 
+publicity or advertising, without prior written consent in each case.
+
+5. Export of this software from the United States may require a
+specific license from the United States Government.  It is the
+responsibility of any person or organization contemplating export
+to obtain such a license before exporting.
+
+6. Certain parts of this software may be protected by patents.  It
+is the users' responsibility to obtain the appropriate
+licenses before using those parts.
+
+If this compilation is used in object code form in an application
+software, acknowledgement of the author is not required but would be
+appreciated. The contribution of any useful modifications or extensions
+to Wei Dai is not required but would also be appreciated.
+
+---[ License.txt end ]---
+
+Debian specific changes are copyright 
+(c) 2000-2002 Stephen Zander <gibreel@debian.org>,
+(c) 2004 Pierre Machard <pmachard@debian.org>,
+(c) 2005-2007 Jens Peter Secher <jps@debian.org>,
+licensed under the same the same terms as the rest of the Crypto++ package.
+
+---[ From mars.cpp begin ]---
+
+// mars.cpp - modified by Sean Woods from Brian Gladman's mars6.c for Crypto++
+// key setup updated by Wei Dai to reflect IBM's "tweak" proposed in August 1999
+
+/* This is an independent implementation of the MARS encryption         */
+/* algorithm designed by a team at IBM as a candidate for the US        */
+/* NIST Advanced Encryption Standard (AES) effort. The algorithm        */
+/* is subject to Patent action by IBM, who intend to offer royalty      */
+/* free use if a Patent is granted.                                     */
+/*                                                                      */
+/* Copyright in this implementation is held by Dr B R Gladman but       */
+/* I hereby give permission for its free direct or derivative use       */
+/* subject to acknowledgment of its origin and compliance with any      */
+/* constraints that IBM place on the use of the MARS algorithm.         */
+/*                                                                      */
+/* Dr Brian Gladman (gladman@seven77.demon.co.uk) 4th October 1998      */
+
+---[ From mars.cpp end ]---
+
--- libcrypto++-5.5.2.orig/debian/libcrypto++-dev.links
+++ libcrypto++-5.5.2/debian/libcrypto++-dev.links
@@ -0,0 +1,4 @@
+/usr/include/crypto++ /usr/include/cryptopp
+/usr/lib/libcrypto++.a /usr/lib/libcryptopp.a
+/usr/lib/libcrypto++.la /usr/lib/libcryptopp.la
+/usr/lib/libcrypto++.so /usr/lib/libcryptopp.so
--- libcrypto++-5.5.2.orig/debian/Makefile.am
+++ libcrypto++-5.5.2/debian/Makefile.am
@@ -0,0 +1,347 @@
+## Process this file with automake to produce Makefile.in
+# Written by Jens Peter Secher <jps@debian.org>.
+
+# Build two versions of cryptest, one that uses data files from the
+# current working directory, and one that uses data files from
+# /usr/share/crypto++.  The former is for running the test suite at
+# build time, the latter is included in the package.
+
+# To test against newest GCC, uncomment the following two lines.
+#CXX = /usr/lib/gcc-snapshot/bin/g++
+#CXXCPP = /usr/lib/gcc-snapshot/bin/g++
+
+bin_PROGRAMS = cryptest cryptestcwd
+cryptest_CXXFLAGS = -DPACKAGE_DATA_DIR='"/usr/share/crypto++/"'
+cryptest_SOURCES = \
+	bench.cpp \
+	bench2.cpp \
+	datatest.cpp \
+	dlltest.cpp \
+	fipsalgt.cpp \
+	regtest.cpp \
+	test.cpp \
+	validat1.cpp \
+	validat2.cpp \
+	validat3.cpp
+cryptest_LDADD = libcrypto++.la
+cryptestcwd_CXXFLAGS = -DPACKAGE_DATA_DIR='""'
+cryptestcwd_SOURCES = \
+	bench.cpp \
+	bench2.cpp \
+	datatest.cpp \
+	dlltest.cpp \
+	fipsalgt.cpp \
+	regtest.cpp \
+	test.cpp \
+	validat1.cpp \
+	validat2.cpp \
+	validat3.cpp
+cryptestcwd_LDADD = libcrypto++.la
+
+lib_LTLIBRARIES = libcrypto++.la
+libcrypto___la_LDFLAGS = -version-info 7:0:0
+libcrypto___la_SOURCES = \
+	3way.cpp \
+	adler32.cpp \
+	algebra.cpp \
+	algparam.cpp \
+	arc4.cpp \
+	asn.cpp	\
+	base32.cpp \
+	base64.cpp \
+	basecode.cpp \
+	bfinit.cpp \
+	blowfish.cpp \
+	blumshub.cpp \
+	camellia.cpp \
+	cast.cpp \
+	casts.cpp \
+	cbcmac.cpp \
+	channels.cpp \
+	cpu.cpp \
+	crc.cpp \
+	cryptlib.cpp \
+	default.cpp \
+	des.cpp \
+	dessp.cpp \
+	dh.cpp \
+	dh2.cpp \
+	dll.cpp \
+	dsa.cpp \
+	ec2n.cpp \
+	eccrypto.cpp \
+	ecp.cpp \
+	elgamal.cpp \
+	emsa2.cpp \
+	eprecomp.cpp \
+	esign.cpp \
+	files.cpp \
+	filters.cpp \
+	fips140.cpp \
+	fipstest.cpp \
+	gf256.cpp \
+	gf2_32.cpp \
+	gf2n.cpp \
+	gfpcrypt.cpp \
+	gost.cpp \
+	gzip.cpp \
+	hex.cpp \
+	hmac.cpp \
+	hrtimer.cpp \
+	ida.cpp \
+	idea.cpp \
+	integer.cpp \
+	iterhash.cpp \
+	luc.cpp \
+	mars.cpp \
+	marss.cpp \
+	md2.cpp \
+	md4.cpp \
+	md5.cpp \
+	misc.cpp \
+	modes.cpp \
+	mqueue.cpp \
+	mqv.cpp \
+	nbtheory.cpp \
+	network.cpp \
+	oaep.cpp \
+	osrng.cpp \
+	panama.cpp \
+	pch.cpp \
+	pkcspad.cpp \
+	polynomi.cpp \
+	pssr.cpp \
+	pubkey.cpp \
+	queue.cpp \
+	rabin.cpp \
+	randpool.cpp \
+	rc2.cpp \
+	rc5.cpp \
+	rc6.cpp \
+	rdtables.cpp \
+	rijndael.cpp \
+	ripemd.cpp \
+	rng.cpp \
+	rsa.cpp \
+	rw.cpp \
+	safer.cpp \
+	shacal2.cpp \
+	salsa.cpp \
+	seal.cpp \
+	serpent.cpp \
+	sha.cpp \
+	shark.cpp \
+	sharkbox.cpp \
+	simple.cpp \
+	skipjack.cpp \
+	socketft.cpp \
+	sosemanuk.cpp \
+	square.cpp \
+	squaretb.cpp \
+	strciphr.cpp \
+	tea.cpp \
+	tftables.cpp \
+	tiger.cpp \
+	tigertab.cpp \
+	trdlocal.cpp \
+	ttmac.cpp \
+	twofish.cpp \
+	vmac.cpp \
+	wait.cpp \
+	wake.cpp \
+	whrlpool.cpp \
+	winpipes.cpp \
+	xtr.cpp \
+	xtrcrypt.cpp \
+	zdeflate.cpp \
+	zinflate.cpp \
+	zlib.cpp
+
+pkginclude_HEADERS = \
+	3way.h \
+	adler32.h \
+	aes.h \
+	algebra.h \
+	algparam.h \
+	arc4.h \
+	argnames.h \
+	asn.h \
+	base32.h \
+	base64.h \
+	basecode.h \
+	bench.h \
+	blowfish.h \
+	blumshub.h \
+	camellia.h \
+	cast.h \
+	cbcmac.h \
+	channels.h \
+	config.h \
+	cpu.h \
+	crc.h \
+	cryptlib.h \
+	default.h \
+	des.h \
+	dh.h \
+	dh2.h \
+	dll.h \
+	dmac.h \
+	dsa.h \
+	ec2n.h \
+	eccrypto.h \
+	ecp.h \
+	elgamal.h \
+	emsa2.h \
+	eprecomp.h \
+	esign.h \
+	factory.h \
+	files.h \
+	filters.h \
+	fips140.h \
+	fltrimpl.h \
+	gf256.h \
+	gf2_32.h \
+	gf2n.h \
+	gfpcrypt.h \
+	gost.h \
+	gzip.h \
+	hex.h \
+	hmac.h \
+	hrtimer.h \
+	ida.h \
+	idea.h \
+	integer.h \
+	iterhash.h \
+	lubyrack.h \
+	luc.h \
+	mars.h \
+	md2.h \
+	md4.h \
+	md5.h \
+	mdc.h \
+	misc.h \
+	modarith.h \
+	modes.h	 \
+	modexppc.h \
+	mqueue.h \
+	mqv.h \
+	nbtheory.h \
+	network.h \
+	nr.h \
+	oaep.h \
+	oids.h \
+	osrng.h \
+	panama.h \
+	pch.h \
+	pkcspad.h \
+	polynomi.h \
+	pssr.h \
+	pubkey.h \
+	pwdbased.h \
+	queue.h \
+	rabin.h \
+	randpool.h \
+	rc2.h \
+	rc5.h \
+	rc6.h \
+	rijndael.h \
+	ripemd.h \
+	rng.h \
+	rsa.h \
+	rw.h \
+	safer.h \
+	salsa.h \
+	seal.h \
+	secblock.h \
+	seckey.h \
+	serpent.h \
+	shacal2.h \
+	sha.h \
+	shark.h \
+	simple.h \
+	skipjack.h \
+	smartptr.h \
+	socketft.h \
+	sosemanuk.h \
+	square.h \
+	stdcpp.h \
+	strciphr.h \
+	tea.h \
+	tiger.h \
+	trdlocal.h \
+	trunhash.h \
+	ttmac.h \
+	twofish.h \
+	vmac.h \
+	wait.h \
+	wake.h \
+	whrlpool.h \
+	winpipes.h \
+	words.h \
+	xtr.h \
+	xtrcrypt.h \
+	zdeflate.h \
+	zinflate.h \
+	zlib.h
+
+pkgdata_DATA = \
+	3desval.dat \
+	3wayval.dat \
+	camellia.dat \
+	cast128v.dat \
+	cast256v.dat \
+	descert.dat \
+	dh1024.dat \
+	dh2048.dat \
+	dlie1024.dat \
+	dlie2048.dat \
+	dsa1024.dat \
+	dsa1024b.dat \
+	dsa512.dat \
+	elgc1024.dat \
+	esig1023.dat \
+	esig1536.dat \
+	esig2046.dat \
+	gostval.dat \
+	ideaval.dat \
+	luc1024.dat \
+	luc2048.dat \
+	lucc1024.dat \
+	lucc512.dat \
+	lucd1024.dat \
+	lucd512.dat \
+	lucs1024.dat \
+	lucs512.dat \
+	marsval.dat \
+	mqv1024.dat \
+	mqv2048.dat \
+	nr1024.dat \
+	nr2048.dat \
+	rabi1024.dat \
+	rabi2048.dat \
+	rc2val.dat \
+	rc5val.dat \
+	rc6val.dat \
+	rijndael.dat \
+	rsa1024.dat \
+	rsa2048.dat \
+	rsa400pb.dat \
+	rsa400pv.dat \
+	rsa512a.dat \
+	rw1024.dat \
+	rw2048.dat \
+	saferval.dat \
+	serpentv.dat \
+	shacal2v.dat \
+	sharkval.dat \
+	skipjack.dat \
+	squareva.dat \
+	twofishv.dat \
+	usage.dat \
+	xtrdh171.dat \
+	xtrdh342.dat
+
+htmldir = $(datadir)/html
+
+html: $(libcrypto___la_SOURCES)
+	doxygen
--- libcrypto++-5.5.2.orig/debian/libcrypto++7.install
+++ libcrypto++-5.5.2/debian/libcrypto++7.install
@@ -0,0 +1 @@
+usr/lib/*.so.*
--- libcrypto++-5.5.2.orig/debian/libcrypto++7.links
+++ libcrypto++-5.5.2/debian/libcrypto++7.links
@@ -0,0 +1 @@
+/usr/lib/libcrypto++.so.7 /usr/lib/libcryptopp.so.7
--- libcrypto++-5.5.2.orig/debian/libcrypto++-dev.docs
+++ libcrypto++-5.5.2/debian/libcrypto++-dev.docs
@@ -0,0 +1 @@
+Readme.txt
--- libcrypto++-5.5.2.orig/debian/patches/75_doxygen_main_link.dpatch
+++ libcrypto++-5.5.2/debian/patches/75_doxygen_main_link.dpatch
@@ -0,0 +1,27 @@
+#! /bin/sh /usr/share/dpatch/dpatch-run
+## 75_doxygen_main_link.dpatch by Jens Peter Secher <jps@debian.org>
+##
+## DP: Exclude links, either because they do not exists or because
+## DP: Doxygen fails to recognise them.
+
+@DPATCH@
+diff -urNad libcrypto++-5.5.2~/cryptlib.h libcrypto++-5.5.2/cryptlib.h
+--- libcrypto++-5.5.2~/cryptlib.h	2007-12-11 21:40:04.000000000 +0100
++++ libcrypto++-5.5.2/cryptlib.h	2007-12-11 21:40:59.000000000 +0100
+@@ -4,7 +4,7 @@
+ 	classes that provide a uniform interface to this library.
+ */
+ 
+-/*!	\mainpage <a href="http://www.cryptopp.com">Crypto++</a><sup><small>&reg;</small></sup> Library 5.5.2 Reference Manual
++/*!	\mainpage Crypto++ Library 5.5.2 Reference Manual
+ <dl>
+ <dt>Abstract Base Classes<dd>
+ 	cryptlib.h
+@@ -69,7 +69,6 @@
+ </dl>
+ 
+ <p>This reference manual is a work in progress. Some classes are still lacking detailed descriptions.
+-<p>Click <a href="CryptoPPRef.zip">here</a> to download a zip archive containing this manual.
+ <p>Thanks to Ryan Phillips for providing the Doxygen configuration file
+ and getting me started with this manual.
+ */
--- libcrypto++-5.5.2.orig/debian/patches/50_doxygen_setup.dpatch
+++ libcrypto++-5.5.2/debian/patches/50_doxygen_setup.dpatch
@@ -0,0 +1,56 @@
+#! /bin/sh /usr/share/dpatch/dpatch-run
+## 50_doxygen_setup.dpatch by Jens Peter Secher <jps@debian.org>
+##
+## DP: Doxygen cannot handle all the source code, so only index the
+## DP: include files.
+
+@DPATCH@
+diff -urNad libcrypto++-5.5~/Doxyfile libcrypto++-5.5/Doxyfile
+--- libcrypto++-5.5~/Doxyfile	2007-05-12 12:08:12.000000000 +0200
++++ libcrypto++-5.5/Doxyfile	2007-05-12 12:22:35.000000000 +0200
+@@ -60,7 +60,7 @@
+ # whereas setting the tag to NO uses a Unix-style encoding (the default for 
+ # all platforms other than Windows).
+ 
+-USE_WINDOWS_ENCODING   = YES
++USE_WINDOWS_ENCODING   = NO
+ 
+ # If the BRIEF_MEMBER_DESC tag is set to YES (the default) Doxygen will 
+ # include brief member descriptions after the members that are listed in 
+@@ -169,7 +169,7 @@
+ # The TAB_SIZE tag can be used to set the number of spaces in a tab. 
+ # Doxygen uses this value to replace tabs by spaces in code fragments.
+ 
+-TAB_SIZE               = 8
++TAB_SIZE               = 4
+ 
+ # This tag can be used to specify a number of aliases that acts 
+ # as commands in the documentation. An alias has the form "name=value". 
+@@ -425,8 +425,7 @@
+ # *.c *.cc *.cxx *.cpp *.c++ *.java *.ii *.ixx *.ipp *.i++ *.inl *.h *.hh *.hxx *.hpp 
+ # *.h++ *.idl *.odl *.cs *.php *.php3 *.inc *.m *.mm
+ 
+-FILE_PATTERNS          = *.h \
+-                         *.cpp
++FILE_PATTERNS          = *.h
+ 
+ # The RECURSIVE tag can be used to turn specify whether or not subdirectories 
+ # should be searched for input files as well. Possible values are YES and NO. 
+@@ -438,7 +437,7 @@
+ # excluded from the INPUT source files. This way you can easily exclude a 
+ # subdirectory from a directory tree whose root is specified with the INPUT tag.
+ 
+-EXCLUDE                = adhoc.cpp
++EXCLUDE                = winpipes.h validate.h bench.h
+ 
+ # The EXCLUDE_SYMLINKS tag can be used select whether or not files or directories 
+ # that are symbolic links (a Unix filesystem feature) are excluded from the input.
+@@ -546,7 +545,7 @@
+ # the COLS_IN_ALPHA_INDEX tag can be used to specify the number of columns 
+ # in which this list will be split (can be a number in the range [1..20])
+ 
+-COLS_IN_ALPHA_INDEX    = 3
++COLS_IN_ALPHA_INDEX    = 2
+ 
+ # In case all classes in a project start with a common prefix, all 
+ # classes will be put under the same header in the alphabetical index. 
--- libcrypto++-5.5.2.orig/debian/patches/40_strict_gcc43_include.dpatch
+++ libcrypto++-5.5.2/debian/patches/40_strict_gcc43_include.dpatch
@@ -0,0 +1,17 @@
+#! /bin/sh /usr/share/dpatch/dpatch-run
+## 40_strict_gcc43_include.dpatch by Jens Peter Secher <jps@debian.org>
+##
+## DP: Explicitly include cstring to allow compilation with GCC 4.3.
+
+@DPATCH@
+diff -urNad libcrypto++-5.5~/misc.h libcrypto++-5.5/misc.h
+--- libcrypto++-5.5~/misc.h	2007-10-14 14:34:21.000000000 +0200
++++ libcrypto++-5.5/misc.h	2007-12-11 19:46:44.000000000 +0100
+@@ -35,6 +35,7 @@
+ #if defined(__GNUC__) && defined(__linux__)
+ #define CRYPTOPP_BYTESWAP_AVAILABLE
+ #include <byteswap.h>
++#include <cstring>
+ #endif
+ 
+ NAMESPACE_BEGIN(CryptoPP)
--- libcrypto++-5.5.2.orig/debian/patches/90_cryptest_data_files_location.dpatch
+++ libcrypto++-5.5.2/debian/patches/90_cryptest_data_files_location.dpatch
@@ -0,0 +1,496 @@
+#! /bin/sh /usr/share/dpatch/dpatch-run
+## 90_cryptest_data_files_location.dpatch by Jens Peter Secher <jps@debian.org>
+##
+## DP: Prefix data file names by PACKAGE_DATA_DIR which is set during build.
+
+@DPATCH@
+diff -urNad libcrypto++-5.5~/bench2.cpp libcrypto++-5.5/bench2.cpp
+--- libcrypto++-5.5~/bench2.cpp	2007-05-12 13:56:06.000000000 +0200
++++ libcrypto++-5.5/bench2.cpp	2007-05-12 13:56:07.000000000 +0200
+@@ -245,44 +245,44 @@
+ 	cout << "<THEAD><TR><TH>Operation<TH>Milliseconds/Operation" << (g_hertz ? "<TH>Megacycles/Operation" : "") << endl;
+ 
+ 	cout << "\n<TBODY style=\"background: yellow\">";
+-	BenchMarkCrypto<RSAES<OAEP<SHA> > >("rsa1024.dat", "RSA 1024", t);
+-	BenchMarkCrypto<LUCES<OAEP<SHA> > >("luc1024.dat", "LUC 1024", t);
+-	BenchMarkCrypto<DLIES<> >("dlie1024.dat", "DLIES 1024", t);
+-	BenchMarkCrypto<LUC_IES<> >("lucc512.dat", "LUCELG 512", t);
++	BenchMarkCrypto<RSAES<OAEP<SHA> > >(PACKAGE_DATA_DIR "rsa1024.dat", "RSA 1024", t);
++	BenchMarkCrypto<LUCES<OAEP<SHA> > >(PACKAGE_DATA_DIR "luc1024.dat", "LUC 1024", t);
++	BenchMarkCrypto<DLIES<> >(PACKAGE_DATA_DIR "dlie1024.dat", "DLIES 1024", t);
++	BenchMarkCrypto<LUC_IES<> >(PACKAGE_DATA_DIR "lucc512.dat", "LUCELG 512", t);
+ 
+ 	cout << "\n<TBODY style=\"background: white\">";
+-	BenchMarkCrypto<RSAES<OAEP<SHA> > >("rsa2048.dat", "RSA 2048", t);
+-	BenchMarkCrypto<LUCES<OAEP<SHA> > >("luc2048.dat", "LUC 2048", t);
+-	BenchMarkCrypto<DLIES<> >("dlie2048.dat", "DLIES 2048", t);
+-	BenchMarkCrypto<LUC_IES<> >("lucc1024.dat", "LUCELG 1024", t);
++	BenchMarkCrypto<RSAES<OAEP<SHA> > >(PACKAGE_DATA_DIR "rsa2048.dat", "RSA 2048", t);
++	BenchMarkCrypto<LUCES<OAEP<SHA> > >(PACKAGE_DATA_DIR "luc2048.dat", "LUC 2048", t);
++	BenchMarkCrypto<DLIES<> >(PACKAGE_DATA_DIR "dlie2048.dat", "DLIES 2048", t);
++	BenchMarkCrypto<LUC_IES<> >(PACKAGE_DATA_DIR "lucc1024.dat", "LUCELG 1024", t);
+ 
+ 	cout << "\n<TBODY style=\"background: yellow\">";
+-	BenchMarkSignature<RSASS<PSSR, SHA> >("rsa1024.dat", "RSA 1024", t);
+-	BenchMarkSignature<RWSS<PSSR, SHA> >("rw1024.dat", "RW 1024", t);
+-	BenchMarkSignature<LUCSS<PSSR, SHA> >("luc1024.dat", "LUC 1024", t);
+-	BenchMarkSignature<NR<SHA> >("nr1024.dat", "NR 1024", t);
+-	BenchMarkSignature<DSA>("dsa1024.dat", "DSA 1024", t);
+-	BenchMarkSignature<LUC_HMP<SHA> >("lucs512.dat", "LUC-HMP 512", t);
+-	BenchMarkSignature<ESIGN<SHA> >("esig1023.dat", "ESIGN 1023", t);
+-	BenchMarkSignature<ESIGN<SHA> >("esig1536.dat", "ESIGN 1536", t);
++	BenchMarkSignature<RSASS<PSSR, SHA> >(PACKAGE_DATA_DIR "rsa1024.dat", "RSA 1024", t);
++	BenchMarkSignature<RWSS<PSSR, SHA> >(PACKAGE_DATA_DIR "rw1024.dat", "RW 1024", t);
++	BenchMarkSignature<LUCSS<PSSR, SHA> >(PACKAGE_DATA_DIR "luc1024.dat", "LUC 1024", t);
++	BenchMarkSignature<NR<SHA> >(PACKAGE_DATA_DIR "nr1024.dat", "NR 1024", t);
++	BenchMarkSignature<DSA>(PACKAGE_DATA_DIR "dsa1024.dat", "DSA 1024", t);
++	BenchMarkSignature<LUC_HMP<SHA> >(PACKAGE_DATA_DIR "lucs512.dat", "LUC-HMP 512", t);
++	BenchMarkSignature<ESIGN<SHA> >(PACKAGE_DATA_DIR "esig1023.dat", "ESIGN 1023", t);
++	BenchMarkSignature<ESIGN<SHA> >(PACKAGE_DATA_DIR "esig1536.dat", "ESIGN 1536", t);
+ 
+ 	cout << "\n<TBODY style=\"background: white\">";
+-	BenchMarkSignature<RSASS<PSSR, SHA> >("rsa2048.dat", "RSA 2048", t);
+-	BenchMarkSignature<RWSS<PSSR, SHA> >("rw2048.dat", "RW 2048", t);
+-	BenchMarkSignature<LUCSS<PSSR, SHA> >("luc2048.dat", "LUC 2048", t);
+-	BenchMarkSignature<NR<SHA> >("nr2048.dat", "NR 2048", t);
+-	BenchMarkSignature<LUC_HMP<SHA> >("lucs1024.dat", "LUC-HMP 1024", t);
+-	BenchMarkSignature<ESIGN<SHA> >("esig2046.dat", "ESIGN 2046", t);
++	BenchMarkSignature<RSASS<PSSR, SHA> >(PACKAGE_DATA_DIR "rsa2048.dat", "RSA 2048", t);
++	BenchMarkSignature<RWSS<PSSR, SHA> >(PACKAGE_DATA_DIR "rw2048.dat", "RW 2048", t);
++	BenchMarkSignature<LUCSS<PSSR, SHA> >(PACKAGE_DATA_DIR "luc2048.dat", "LUC 2048", t);
++	BenchMarkSignature<NR<SHA> >(PACKAGE_DATA_DIR "nr2048.dat", "NR 2048", t);
++	BenchMarkSignature<LUC_HMP<SHA> >(PACKAGE_DATA_DIR "lucs1024.dat", "LUC-HMP 1024", t);
++	BenchMarkSignature<ESIGN<SHA> >(PACKAGE_DATA_DIR "esig2046.dat", "ESIGN 2046", t);
+ 
+ 	cout << "\n<TBODY style=\"background: yellow\">";
+-	BenchMarkKeyAgreement<XTR_DH>("xtrdh171.dat", "XTR-DH 171", t);
+-	BenchMarkKeyAgreement<XTR_DH>("xtrdh342.dat", "XTR-DH 342", t);
+-	BenchMarkKeyAgreement<DH>("dh1024.dat", "DH 1024", t);
+-	BenchMarkKeyAgreement<DH>("dh2048.dat", "DH 2048", t);
+-	BenchMarkKeyAgreement<LUC_DH>("lucd512.dat", "LUCDIF 512", t);
+-	BenchMarkKeyAgreement<LUC_DH>("lucd1024.dat", "LUCDIF 1024", t);
+-	BenchMarkKeyAgreement<MQV>("mqv1024.dat", "MQV 1024", t);
+-	BenchMarkKeyAgreement<MQV>("mqv2048.dat", "MQV 2048", t);
++	BenchMarkKeyAgreement<XTR_DH>(PACKAGE_DATA_DIR "xtrdh171.dat", "XTR-DH 171", t);
++	BenchMarkKeyAgreement<XTR_DH>(PACKAGE_DATA_DIR "xtrdh342.dat", "XTR-DH 342", t);
++	BenchMarkKeyAgreement<DH>(PACKAGE_DATA_DIR "dh1024.dat", "DH 1024", t);
++	BenchMarkKeyAgreement<DH>(PACKAGE_DATA_DIR "dh2048.dat", "DH 2048", t);
++	BenchMarkKeyAgreement<LUC_DH>(PACKAGE_DATA_DIR "lucd512.dat", "LUCDIF 512", t);
++	BenchMarkKeyAgreement<LUC_DH>(PACKAGE_DATA_DIR "lucd1024.dat", "LUCDIF 1024", t);
++	BenchMarkKeyAgreement<MQV>(PACKAGE_DATA_DIR "mqv1024.dat", "MQV 1024", t);
++	BenchMarkKeyAgreement<MQV>(PACKAGE_DATA_DIR "mqv2048.dat", "MQV 2048", t);
+ 
+ 	cout << "\n<TBODY style=\"background: white\">";
+ 	{
+diff -urNad libcrypto++-5.5~/test.cpp libcrypto++-5.5/test.cpp
+--- libcrypto++-5.5~/test.cpp	2007-05-12 13:56:06.000000000 +0200
++++ libcrypto++-5.5/test.cpp	2007-05-12 13:56:07.000000000 +0200
+@@ -326,7 +326,7 @@
+ 			AES_CTR_Encrypt(argv[2], argv[3], argv[4], argv[5]);
+ 		else if (command == "h")
+ 		{
+-			FileSource usage("usage.dat", true, new FileSink(cout));
++			FileSource usage(PACKAGE_DATA_DIR "usage.dat", true, new FileSink(cout));
+ 			return 1;
+ 		}
+ 		else if (command == "V")
+diff -urNad libcrypto++-5.5~/validat1.cpp libcrypto++-5.5/validat1.cpp
+--- libcrypto++-5.5~/validat1.cpp	2007-05-12 13:56:06.000000000 +0200
++++ libcrypto++-5.5/validat1.cpp	2007-05-12 13:57:17.000000000 +0200
+@@ -499,12 +499,12 @@
+ {
+ 	cout << "\nDES validation suite running...\n\n";
+ 
+-	FileSource valdata("descert.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "descert.dat", true, new HexDecoder);
+ 	bool pass = BlockTransformationTest(FixedRoundsCipherFactory<DESEncryption, DESDecryption>(), valdata);
+ 
+ 	cout << "\nTesting EDE2, EDE3, and XEX3 variants...\n\n";
+ 
+-	FileSource valdata1("3desval.dat", true, new HexDecoder);
++	FileSource valdata1(PACKAGE_DATA_DIR "3desval.dat", true, new HexDecoder);
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<DES_EDE2_Encryption, DES_EDE2_Decryption>(), valdata1, 1) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<DES_EDE3_Encryption, DES_EDE3_Decryption>(), valdata1, 1) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<DES_XEX3_Encryption, DES_XEX3_Decryption>(), valdata1, 1) && pass;
+@@ -818,7 +818,7 @@
+ {
+ 	cout << "\nIDEA validation suite running...\n\n";
+ 
+-	FileSource valdata("ideaval.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "ideaval.dat", true, new HexDecoder);
+ 	return BlockTransformationTest(FixedRoundsCipherFactory<IDEAEncryption, IDEADecryption>(), valdata);
+ }
+ 
+@@ -826,7 +826,7 @@
+ {
+ 	cout << "\nSAFER validation suite running...\n\n";
+ 
+-	FileSource valdata("saferval.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "saferval.dat", true, new HexDecoder);
+ 	bool pass = true;
+ 	pass = BlockTransformationTest(VariableRoundsCipherFactory<SAFER_K_Encryption, SAFER_K_Decryption>(8,6), valdata, 4) && pass;
+ 	pass = BlockTransformationTest(VariableRoundsCipherFactory<SAFER_K_Encryption, SAFER_K_Decryption>(16,12), valdata, 4) && pass;
+@@ -839,7 +839,7 @@
+ {
+ 	cout << "\nRC2 validation suite running...\n\n";
+ 
+-	FileSource valdata("rc2val.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "rc2val.dat", true, new HexDecoder);
+ 	HexEncoder output(new FileSink(cout));
+ 	SecByteBlock plain(RC2Encryption::BLOCKSIZE), cipher(RC2Encryption::BLOCKSIZE), out(RC2Encryption::BLOCKSIZE), outplain(RC2Encryption::BLOCKSIZE);
+ 	SecByteBlock key(128);
+@@ -1049,7 +1049,7 @@
+ {
+ 	cout << "\nRC5 validation suite running...\n\n";
+ 
+-	FileSource valdata("rc5val.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "rc5val.dat", true, new HexDecoder);
+ 	return BlockTransformationTest(VariableRoundsCipherFactory<RC5Encryption, RC5Decryption>(16, 12), valdata);
+ }
+ 
+@@ -1057,7 +1057,7 @@
+ {
+ 	cout << "\nRC6 validation suite running...\n\n";
+ 
+-	FileSource valdata("rc6val.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "rc6val.dat", true, new HexDecoder);
+ 	bool pass = true;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<RC6Encryption, RC6Decryption>(16), valdata, 2) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<RC6Encryption, RC6Decryption>(24), valdata, 2) && pass;
+@@ -1069,7 +1069,7 @@
+ {
+ 	cout << "\nMARS validation suite running...\n\n";
+ 
+-	FileSource valdata("marsval.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "marsval.dat", true, new HexDecoder);
+ 	bool pass = true;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<MARSEncryption, MARSDecryption>(16), valdata, 4) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<MARSEncryption, MARSDecryption>(24), valdata, 3) && pass;
+@@ -1081,7 +1081,7 @@
+ {
+ 	cout << "\nRijndael validation suite running...\n\n";
+ 
+-	FileSource valdata("rijndael.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "rijndael.dat", true, new HexDecoder);
+ 	bool pass = true;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<RijndaelEncryption, RijndaelDecryption>(16), valdata, 4) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<RijndaelEncryption, RijndaelDecryption>(24), valdata, 3) && pass;
+@@ -1093,7 +1093,7 @@
+ {
+ 	cout << "\nTwofish validation suite running...\n\n";
+ 
+-	FileSource valdata("twofishv.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "twofishv.dat", true, new HexDecoder);
+ 	bool pass = true;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<TwofishEncryption, TwofishDecryption>(16), valdata, 4) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<TwofishEncryption, TwofishDecryption>(24), valdata, 3) && pass;
+@@ -1105,7 +1105,7 @@
+ {
+ 	cout << "\nSerpent validation suite running...\n\n";
+ 
+-	FileSource valdata("serpentv.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "serpentv.dat", true, new HexDecoder);
+ 	bool pass = true;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<SerpentEncryption, SerpentDecryption>(16), valdata, 4) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<SerpentEncryption, SerpentDecryption>(24), valdata, 3) && pass;
+@@ -1151,7 +1151,7 @@
+ {
+ 	cout << "\n3-WAY validation suite running...\n\n";
+ 
+-	FileSource valdata("3wayval.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "3wayval.dat", true, new HexDecoder);
+ 	return BlockTransformationTest(FixedRoundsCipherFactory<ThreeWayEncryption, ThreeWayDecryption>(), valdata);
+ }
+ 
+@@ -1159,7 +1159,7 @@
+ {
+ 	cout << "\nGOST validation suite running...\n\n";
+ 
+-	FileSource valdata("gostval.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "gostval.dat", true, new HexDecoder);
+ 	return BlockTransformationTest(FixedRoundsCipherFactory<GOSTEncryption, GOSTDecryption>(), valdata);
+ }
+ 
+@@ -1168,7 +1168,7 @@
+ 	cout << "\nSHARK validation suite running...\n\n";
+ 
+ #ifdef WORD64_AVAILABLE
+-	FileSource valdata("sharkval.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "sharkval.dat", true, new HexDecoder);
+ 	return BlockTransformationTest(FixedRoundsCipherFactory<SHARKEncryption, SHARKDecryption>(), valdata);
+ #else
+ 	cout << "word64 not available, skipping SHARK validation." << endl;
+@@ -1182,14 +1182,14 @@
+ 
+ 	cout << "\nCAST-128 validation suite running...\n\n";
+ 
+-	FileSource val128("cast128v.dat", true, new HexDecoder);
++	FileSource val128(PACKAGE_DATA_DIR "cast128v.dat", true, new HexDecoder);
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<CAST128Encryption, CAST128Decryption>(16), val128, 1) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<CAST128Encryption, CAST128Decryption>(10), val128, 1) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<CAST128Encryption, CAST128Decryption>(5), val128, 1) && pass;
+ 
+ 	cout << "\nCAST-256 validation suite running...\n\n";
+ 
+-	FileSource val256("cast256v.dat", true, new HexDecoder);
++	FileSource val256(PACKAGE_DATA_DIR "cast256v.dat", true, new HexDecoder);
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<CAST256Encryption, CAST256Decryption>(16), val256, 1) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<CAST256Encryption, CAST256Decryption>(24), val256, 1) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<CAST256Encryption, CAST256Decryption>(32), val256, 1) && pass;
+@@ -1201,7 +1201,7 @@
+ {
+ 	cout << "\nSquare validation suite running...\n\n";
+ 
+-	FileSource valdata("squareva.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "squareva.dat", true, new HexDecoder);
+ 	return BlockTransformationTest(FixedRoundsCipherFactory<SquareEncryption, SquareDecryption>(), valdata);
+ }
+ 
+@@ -1209,7 +1209,7 @@
+ {
+ 	cout << "\nSKIPJACK validation suite running...\n\n";
+ 
+-	FileSource valdata("skipjack.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "skipjack.dat", true, new HexDecoder);
+ 	return BlockTransformationTest(FixedRoundsCipherFactory<SKIPJACKEncryption, SKIPJACKDecryption>(), valdata);
+ }
+ 
+@@ -1313,7 +1313,7 @@
+ 	cout << "\nSHACAL-2 validation suite running...\n\n";
+ 
+ 	bool pass = true;
+-	FileSource valdata("shacal2v.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "shacal2v.dat", true, new HexDecoder);
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<SHACAL2Encryption, SHACAL2Decryption>(16), valdata, 4) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<SHACAL2Encryption, SHACAL2Decryption>(64), valdata, 10) && pass;
+ 	return pass;
+@@ -1324,7 +1324,7 @@
+ 	cout << "\nCamellia validation suite running...\n\n";
+ 
+ 	bool pass = true;
+-	FileSource valdata("camellia.dat", true, new HexDecoder);
++	FileSource valdata(PACKAGE_DATA_DIR "camellia.dat", true, new HexDecoder);
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<CamelliaEncryption, CamelliaDecryption>(16), valdata, 15) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<CamelliaEncryption, CamelliaDecryption>(24), valdata, 15) && pass;
+ 	pass = BlockTransformationTest(FixedRoundsCipherFactory<CamelliaEncryption, CamelliaDecryption>(32), valdata, 15) && pass;
+@@ -1335,17 +1335,17 @@
+ {
+ 	cout << "\nSalsa validation suite running...\n";
+ 
+-	return RunTestDataFile("TestVectors/salsa.txt");
++	return RunTestDataFile(PACKAGE_DATA_DIR "TestVectors/salsa.txt");
+ }
+ 
+ bool ValidateSosemanuk()
+ {
+ 	cout << "\nSosemanuk validation suite running...\n";
+-	return RunTestDataFile("TestVectors/sosemanuk.txt");
++	return RunTestDataFile(PACKAGE_DATA_DIR "TestVectors/sosemanuk.txt");
+ }
+ 
+ bool ValidateVMAC()
+ {
+ 	cout << "\nVMAC validation suite running...\n";
+-	return RunTestDataFile("TestVectors/vmac.txt");
++	return RunTestDataFile(PACKAGE_DATA_DIR "TestVectors/vmac.txt");
+ }
+diff -urNad libcrypto++-5.5~/validat2.cpp libcrypto++-5.5/validat2.cpp
+--- libcrypto++-5.5~/validat2.cpp	2007-05-12 13:56:06.000000000 +0200
++++ libcrypto++-5.5/validat2.cpp	2007-05-12 13:56:07.000000000 +0200
+@@ -268,7 +268,7 @@
+ 			"\x69\x94\xac\x04\xf3\x41\xb5\x7d\x05\x20\x2d\x42\x8f\xb2\xa2\x7b"
+ 			"\x5c\x77\xdf\xd9\xb1\x5b\xfc\x3d\x55\x93\x53\x50\x34\x10\xc1\xe1";
+ 
+-		FileSource keys("rsa512a.dat", true, new HexDecoder);
++		FileSource keys(PACKAGE_DATA_DIR "rsa512a.dat", true, new HexDecoder);
+ 		Weak::RSASSA_PKCS1v15_MD2_Signer rsaPriv(keys);
+ 		Weak::RSASSA_PKCS1v15_MD2_Verifier rsaPub(rsaPriv);
+ 
+@@ -293,7 +293,7 @@
+ 		cout << "invalid signature verification\n";
+ 	}
+ 	{
+-		FileSource keys("rsa1024.dat", true, new HexDecoder);
++		FileSource keys(PACKAGE_DATA_DIR "rsa1024.dat", true, new HexDecoder);
+ 		RSAES_PKCS1v15_Decryptor rsaPriv(keys);
+ 		RSAES_PKCS1v15_Encryptor rsaPub(rsaPriv);
+ 
+@@ -314,8 +314,8 @@
+ 		bq.Put(oaepSeed, 20);
+ 		FixedRNG rng(bq);
+ 
+-		FileSource privFile("rsa400pv.dat", true, new HexDecoder);
+-		FileSource pubFile("rsa400pb.dat", true, new HexDecoder);
++		FileSource privFile(PACKAGE_DATA_DIR "rsa400pv.dat", true, new HexDecoder);
++		FileSource pubFile(PACKAGE_DATA_DIR "rsa400pb.dat", true, new HexDecoder);
+ 		RSAES_OAEP_SHA_Decryptor rsaPriv;
+ 		rsaPriv.AccessKey().BERDecodePrivateKey(privFile, false, 0);
+ 		RSAES_OAEP_SHA_Encryptor rsaPub(pubFile);
+@@ -338,7 +338,7 @@
+ {
+ 	cout << "\nDH validation suite running...\n\n";
+ 
+-	FileSource f("dh1024.dat", true, new HexDecoder());
++	FileSource f(PACKAGE_DATA_DIR "dh1024.dat", true, new HexDecoder());
+ 	DH dh(f);
+ 	return SimpleKeyAgreementValidate(dh);
+ }
+@@ -347,7 +347,7 @@
+ {
+ 	cout << "\nMQV validation suite running...\n\n";
+ 
+-	FileSource f("mqv1024.dat", true, new HexDecoder());
++	FileSource f(PACKAGE_DATA_DIR "mqv1024.dat", true, new HexDecoder());
+ 	MQV mqv(f);
+ 	return AuthenticatedKeyAgreementValidate(mqv);
+ }
+@@ -356,7 +356,7 @@
+ {
+ 	cout << "\nLUC-DH validation suite running...\n\n";
+ 
+-	FileSource f("lucd512.dat", true, new HexDecoder());
++	FileSource f(PACKAGE_DATA_DIR "lucd512.dat", true, new HexDecoder());
+ 	LUC_DH dh(f);
+ 	return SimpleKeyAgreementValidate(dh);
+ }
+@@ -365,7 +365,7 @@
+ {
+ 	cout << "\nXTR-DH validation suite running...\n\n";
+ 
+-	FileSource f("xtrdh171.dat", true, new HexDecoder());
++	FileSource f(PACKAGE_DATA_DIR "xtrdh171.dat", true, new HexDecoder());
+ 	XTR_DH dh(f);
+ 	return SimpleKeyAgreementValidate(dh);
+ }
+@@ -375,7 +375,7 @@
+ 	cout << "\nElGamal validation suite running...\n\n";
+ 	bool pass = true;
+ 	{
+-		FileSource fc("elgc1024.dat", true, new HexDecoder);
++		FileSource fc(PACKAGE_DATA_DIR "elgc1024.dat", true, new HexDecoder);
+ 		ElGamalDecryptor privC(fc);
+ 		ElGamalEncryptor pubC(privC);
+ 		privC.AccessKey().Precompute();
+@@ -393,7 +393,7 @@
+ 	cout << "\nDLIES validation suite running...\n\n";
+ 	bool pass = true;
+ 	{
+-		FileSource fc("dlie1024.dat", true, new HexDecoder);
++		FileSource fc(PACKAGE_DATA_DIR "dlie1024.dat", true, new HexDecoder);
+ 		DLIES<>::Decryptor privC(fc);
+ 		DLIES<>::Encryptor pubC(privC);
+ 		pass = CryptoSystemValidate(privC, pubC) && pass;
+@@ -416,7 +416,7 @@
+ 	cout << "\nNR validation suite running...\n\n";
+ 	bool pass = true;
+ 	{
+-		FileSource f("nr2048.dat", true, new HexDecoder);
++		FileSource f(PACKAGE_DATA_DIR "nr2048.dat", true, new HexDecoder);
+ 		NR<SHA>::Signer privS(f);
+ 		privS.AccessKey().Precompute();
+ 		NR<SHA>::Verifier pubS(privS);
+@@ -439,7 +439,7 @@
+ 
+ 	bool pass = true, fail;
+ 	{
+-	FileSource fs("dsa512.dat", true, new HexDecoder());
++	FileSource fs(PACKAGE_DATA_DIR "dsa512.dat", true, new HexDecoder());
+ 	GDSA<SHA>::Signer priv(fs);
+ 	priv.AccessKey().Precompute(16);
+ 	GDSA<SHA>::Verifier pub(priv);
+@@ -481,10 +481,10 @@
+ 	fail = pub.VerifyMessage((byte *)"xyz", 3, sig, sizeof(sig));
+ 	pass = pass && !fail;
+ 	}
+-	FileSource fs1("dsa1024.dat", true, new HexDecoder());
++	FileSource fs1(PACKAGE_DATA_DIR "dsa1024.dat", true, new HexDecoder());
+ 	DSA::Signer priv(fs1);
+ 	DSA::Verifier pub(priv);
+-	FileSource fs2("dsa1024b.dat", true, new HexDecoder());
++	FileSource fs2(PACKAGE_DATA_DIR "dsa1024b.dat", true, new HexDecoder());
+ 	DSA::Verifier pub1(fs2);
+ 	assert(pub.GetKey() == pub1.GetKey());
+ 	pass = SignatureValidate(priv, pub, thorough) && pass;
+@@ -497,7 +497,7 @@
+ 	bool pass=true;
+ 
+ 	{
+-		FileSource f("luc1024.dat", true, new HexDecoder);
++		FileSource f(PACKAGE_DATA_DIR "luc1024.dat", true, new HexDecoder);
+ 		LUCSSA_PKCS1v15_SHA_Signer priv(f);
+ 		LUCSSA_PKCS1v15_SHA_Verifier pub(priv);
+ 		pass = SignatureValidate(priv, pub) && pass;
+@@ -514,14 +514,14 @@
+ {
+ 	cout << "\nLUC-HMP validation suite running...\n\n";
+ 
+-	FileSource f("lucs512.dat", true, new HexDecoder);
++	FileSource f(PACKAGE_DATA_DIR "lucs512.dat", true, new HexDecoder);
+ 	LUC_HMP<SHA>::Signer privS(f);
+ 	LUC_HMP<SHA>::Verifier pubS(privS);
+ 	bool pass = SignatureValidate(privS, pubS);
+ 
+ 	cout << "\nLUC-IES validation suite running...\n\n";
+ 
+-	FileSource fc("lucc512.dat", true, new HexDecoder);
++	FileSource fc(PACKAGE_DATA_DIR "lucc512.dat", true, new HexDecoder);
+ 	LUC_IES<>::Decryptor privC(fc);
+ 	LUC_IES<>::Encryptor pubC(privC);
+ 	pass = CryptoSystemValidate(privC, pubC) && pass;
+@@ -535,7 +535,7 @@
+ 	bool pass=true;
+ 
+ 	{
+-		FileSource f("rabi1024.dat", true, new HexDecoder);
++		FileSource f(PACKAGE_DATA_DIR "rabi1024.dat", true, new HexDecoder);
+ 		RabinSS<PSSR, SHA>::Signer priv(f);
+ 		RabinSS<PSSR, SHA>::Verifier pub(priv);
+ 		pass = SignatureValidate(priv, pub) && pass;
+@@ -552,7 +552,7 @@
+ {
+ 	cout << "\nRW validation suite running...\n\n";
+ 
+-	FileSource f("rw1024.dat", true, new HexDecoder);
++	FileSource f(PACKAGE_DATA_DIR "rw1024.dat", true, new HexDecoder);
+ 	RWSS<PSSR, SHA>::Signer priv(f);
+ 	RWSS<PSSR, SHA>::Verifier pub(priv);
+ 
+@@ -564,7 +564,7 @@
+ {
+ 	cout << "\nBlumGoldwasser validation suite running...\n\n";
+ 
+-	FileSource f("blum512.dat", true, new HexDecoder);
++	FileSource f(PACKAGE_DATA_DIR "blum512.dat", true, new HexDecoder);
+ 	BlumGoldwasserPrivateKey priv(f);
+ 	BlumGoldwasserPublicKey pub(priv);
+ 
+@@ -734,7 +734,7 @@
+ 		"\x74\x02\x37\x0E\xED\x0A\x06\xAD\xF4\x15\x65\xB8\xE1\xD1\x45\xAE\x39\x19\xB4\xFF\x5D\xF1\x45\x7B\xE0\xFE\x72\xED\x11\x92\x8F\x61\x41\x4F\x02\x00\xF2\x76\x6F\x7C"
+ 		"\x79\xA2\xE5\x52\x20\x5D\x97\x5E\xFE\x39\xAE\x21\x10\xFB\x35\xF4\x80\x81\x41\x13\xDD\xE8\x5F\xCA\x1E\x4F\xF8\x9B\xB2\x68\xFB\x28";
+ 
+-	FileSource keys("esig1536.dat", true, new HexDecoder);
++	FileSource keys(PACKAGE_DATA_DIR "esig1536.dat", true, new HexDecoder);
+ 	ESIGN<SHA>::Signer signer(keys);
+ 	ESIGN<SHA>::Verifier verifier(signer);
+ 
+diff -urNad libcrypto++-5.5~/validat3.cpp libcrypto++-5.5/validat3.cpp
+--- libcrypto++-5.5~/validat3.cpp	2007-05-12 13:56:06.000000000 +0200
++++ libcrypto++-5.5/validat3.cpp	2007-05-12 13:56:07.000000000 +0200
+@@ -378,7 +378,7 @@
+ {
+ 	cout << "\nPanama validation suite running...\n";
+ 
+-	return RunTestDataFile("TestVectors/panama.txt");
++	return RunTestDataFile(PACKAGE_DATA_DIR "TestVectors/panama.txt");
+ }
+ 
+ bool ValidateWhirlpool()
+@@ -386,7 +386,7 @@
+ 	cout << "\nWhirlpool Hash Function validation suite running...\n";
+ 
+ #ifdef WORD64_AVAILABLE
+-	return RunTestDataFile("TestVectors/whrlpool.txt");
++	return RunTestDataFile(PACKAGE_DATA_DIR "TestVectors/whrlpool.txt");
+ #else
+ 	cout << "word64 not available, skipping Whirlpool validation." << endl;
+ 	return true;
--- libcrypto++-5.5.2.orig/debian/patches/00list
+++ libcrypto++-5.5.2/debian/patches/00list
@@ -0,0 +1,4 @@
+40_strict_gcc43_include
+50_doxygen_setup
+75_doxygen_main_link
+90_cryptest_data_files_location
--- libcrypto++-5.5.2.orig/debian/libcrypto++-doc.doc-base
+++ libcrypto++-5.5.2/debian/libcrypto++-doc.doc-base
@@ -0,0 +1,10 @@
+Document: libcrypto++
+Title: Crypto++ library reference manual
+Author: Wei Dai
+Abstract: Reference manual for the general purpose cryptographic library
+ Crypto++ for the C++ language.
+Section: Programming
+
+Format: HTML
+Index: /usr/share/doc/libcrypto++-doc/html/index.html
+Files: /usr/share/doc/libcrypto++-doc/html/*.html
--- libcrypto++-5.5.2.orig/debian/changelog
+++ libcrypto++-5.5.2/debian/changelog
@@ -0,0 +1,304 @@
+libcrypto++ (5.5.2-2) unstable; urgency=low
+
+  * Produce a pkg-config file for the development package.
+    (Closes: #473090)
+  * Use doc-bas section Programming.
+
+ -- Jens Peter Secher <jps@debian.org>  Sat, 29 Mar 2008 17:37:32 +0100
+
+libcrypto++ (5.5.2-1) unstable; urgency=low
+
+  * New upstream version.
+  * Increased SONAME from 6 to 7 because of API changes.
+  * Fixed GCC 4.3 header include problem.
+    (Closes: #455627)
+  * Created symlinks from libcryptopp* to libcrypto++*, as requested in
+    bug #448766.
+  * Bumped debhelper version to 5.
+  * Bumped Standards-Version to 3.7.3.
+
+ -- Jens Peter Secher <jps@debian.org>  Tue, 11 Dec 2007 19:06:15 +0100
+
+libcrypto++ (5.5-5) unstable; urgency=low
+
+  * Create a symlink to /usr/include/cryptopp -> crypto++ to aid
+    portability of client code.
+    (Closes: #448766)
+  * Bumped automake to 1.10 instead of 1.9 .
+  
+ -- Jens Peter Secher <jps@debian.org>  Sun, 11 Nov 2007 21:51:53 +0100
+
+libcrypto++ (5.5-4) unstable; urgency=low
+
+  * Use POSIX threads on GNU/kFreeBSD, thanks to Petr Salinger.
+    (Closes: #433672)
+
+ -- Jens Peter Secher <jps@debian.org>  Sun, 19 Aug 2007 10:02:37 +0200
+
+libcrypto++ (5.5-3) unstable; urgency=high
+
+  * Do not compile with -msse2 to avoid crash on Pentium II, thanks
+    to Adeodato Simó.  Hence the high urgency.
+    (Closes: #428150)
+  * Use ${binary:Version} instead of ${Source-Version} to facilitate
+    binNMU.
+  * Do not ignore 'make clean' errors.
+  
+ -- Jens Peter Secher <jps@debian.org>  Sat, 30 Jun 2007 16:39:14 +0200
+
+libcrypto++ (5.5-2) unstable; urgency=low
+
+  * Use CURDIR throughout debian/rules to avoid buildd failures.
+
+ -- Jens Peter Secher <jps@debian.org>  Tue, 29 May 2007 20:29:08 +0200
+
+libcrypto++ (5.5-1) unstable; urgency=low
+
+  * New upstream release.
+  * Bumped SO name to 6.0.0 because of new namespaces and removed algorithms.
+  * Updated man page and build scripts.
+  * Only use header files to generate documentation because Doxygen
+    otherwise chokes.
+
+ -- Jens Peter Secher <jps@debian.org>  Sat, 12 May 2007 12:50:30 +0200
+
+libcrypto++ (5.4-1) experimental; urgency=low
+
+  * New upstream release.  
+  * Removed all patches that have now been included upstream.
+  * Now that things are stable with both Crypto++ and GCC, the shared
+    library has a proper SO name.
+
+ -- Jens Peter Secher <jps@debian.org>  Fri, 15 Dec 2006 23:32:46 +0100
+
+libcrypto++ (5.2.1c2a-3) unstable; urgency=low
+
+  * Patch source so that it compiles with GCC 4.1 .  More specifically,
+    avoid mixing implicit calls to base classes and free-standing
+    functions.
+    (Closes: #356170)
+  * Use LDFLAGS=-pthread to fix linking errors.
+
+ -- Jens Peter Secher <jps@debian.org>  Thu, 16 Mar 2006 23:08:48 +0100
+
+libcrypto++ (5.2.1c2a-2) unstable; urgency=low
+
+  * Build-depend on a version of g++ that fixes PR c++/21123 which
+    resulted in internal compiler errors on m68k, arm, and hppa
+    (Closes: #343003)
+  * Include an override to stop Lintian complaining about the name of the
+    shared library.
+  * Removed link in main headline of Doxygen generated documentaion since
+    Doxygen insists on escaping it.
+
+ -- Jens Peter Secher <jps@debian.org>  Tue, 13 Dec 2005 20:40:25 +0100
+
+libcrypto++ (5.2.1c2a-1) unstable; urgency=low
+
+  * Rebuild and name change due to libstdc++6 mt-allocator transition.
+    (Closes: #339201)
+
+ -- Jens Peter Secher <jps@debian.org>  Sat, 19 Nov 2005 23:56:27 +0100
+
+libcrypto++ (5.2.1c2-8) unstable; urgency=low
+
+  * Force autoreconf to use automake1.9 so that it is possible to have
+    several automake versions installed.
+
+ -- Jens Peter Secher <jps@debian.org>  Sat,  1 Oct 2005 16:11:18 +0200
+
+libcrypto++ (5.2.1c2-7) unstable; urgency=low
+
+  * Use the upstream-provided way of doing manual template instantiation
+    on architectures where it is necessary to use GCC3.4.
+
+ -- Jens Peter Secher <jps@debian.org>  Mon, 26 Sep 2005 19:08:30 +0200
+
+libcrypto++ (5.2.1c2-6) unstable; urgency=low
+
+  * Circumvent GCC4 internal compiler error on m68k, arm, and hppa by
+    using GCC3.4 on those architectures, thanks to Adeodato Simó.
+    (Closes: #328975)
+
+ -- Jens Peter Secher <jps@debian.org>  Tue, 20 Sep 2005 20:46:29 +0200
+
+libcrypto++ (5.2.1c2-5) unstable; urgency=low
+
+  * Fixed the debian/rules so that the binary-arch target can be built in
+    isolation.
+    (Closes: #323161)
+  * Added a doc-base file for the libcrypto++-doc package.
+
+ -- Jens Peter Secher <jps@debian.org>  Mon, 15 Aug 2005 22:18:05 +0200
+
+libcrypto++ (5.2.1c2-4) unstable; urgency=low
+
+  * Really take care of endianess this time by letting config.status
+    manipulate config.h .
+  * Split the documentation into a libcrypto++-doc package.
+
+ -- Jens Peter Secher <jps@debian.org>  Wed, 10 Aug 2005 23:47:51 +0200
+
+libcrypto++ (5.2.1c2-3) unstable; urgency=low
+
+  * Take care of architecture endianess by using AC_C_BIGENDIAN in
+    configure.ac .  Should fix building for s390 and mipsel.
+
+ -- Jens Peter Secher <jps@debian.org>  Mon,  8 Aug 2005 21:25:50 +0200
+
+libcrypto++ (5.2.1c2-2) unstable; urgency=low
+
+  * Stopped including autotools generated scripts, and instead
+    build-depends on automaken to avoid strange problems with libtool that
+    causes problems for the build daemons.
+  * Fix cryptest so that it always can find its data files, and put it in
+    the libcrypto++-utils package again.
+
+ -- Jens Peter Secher <jps@debian.org>  Sat,  6 Aug 2005 16:34:56 +0200
+
+libcrypto++ (5.2.1c2-1) unstable; urgency=low
+
+  * New maintainer.
+    (Closes: #288433)
+  * Complete re-autotoolising of the package to retain pristine upstream
+    source and to only build-depend on libtool.
+  * The crypto++-util package has been merged into the crypto++-dev
+    package and is thus dead.
+  * Applied patches from Ben Hutchings to avoid compile warnings
+    (Closes: #286114)
+  * Circumvented anonymous-enum and template-instantiations problems with
+    GCC 4.  Thanks to Florian Weimer and Jozef Matula for guiding me in
+    the right direction.
+    (Closes: #318518)
+  * Started using dpatch since some of the above patches probably could
+    make it upstream.
+  
+ -- Jens Peter Secher <jps@debian.org>  Sun, 31 Jul 2005 02:07:29 +0200
+
+libcrypto++ (5.2.1a-1) unstable; urgency=high
+
+  * Urgency set to high because lastest upload was unclean
+  * Rename libcrypto++-5.2.1.orig.tar.gz in  libcrypto++-5.2.1a.orig.tar.gz
+  
+ -- Pierre Machard <pmachard@debian.org>  Fri, 27 Aug 2004 12:35:05 +0200
+
+libcrypto++ (5.2.1-2) unstable; urgency=high
+
+  * Added TestVectors to example dir
+  * Add symlink from cryptopp_config.h to config.h (closes: #244980)
+  * Hack configure.in to fit with new upstream version. This hack is
+    far from being complete and quite uggly.
+  * Update manpage
+  * Automaticaly update config.{sub,guess}
+
+ -- Pierre Machard <pmachard@debian.org>  Sat, 21 Aug 2004 08:59:37 +0200
+
+libcrypto++ (5.2.1-1) unstable; urgency=high
+
+  * Adding myself as package uploaders
+  * Urgency set to high because of #244892
+  * New upstream release (closes: #244892, #247922, #245921, #261074)
+
+ -- Pierre Machard <pmachard@debian.org>  Fri, 20 Aug 2004 05:22:28 +0200
+
+libcrypto++ (5.1-5) unstable; urgency=low
+
+  * Remove the final arch specific (rather than feature specifc) tests in
+    crypto_config.h,
+  Closes: #238220
+  * Add symlinks libcrypto++.{a,la,so} pointing to
+    libcrypto++5.1.{a,la,so} so that users can act like the ABI of this
+    library doesn't change with every major release,
+  Closes: #241148
+
+ -- Stephen Zander <gibreel@debian.org>  Mon, 19 Apr 2004 18:10:28 -0700
+
+libcrypto++ (5.1-4) unstable; urgency=low
+
+  * Build with -fno-strict-aliasing.  This should fix the segfaults on
+    non-i386 architectures.
+  * Add -ffunction-sections for hppa build,
+  Closes: #238220
+
+ -- Stephen Zander <gibreel@debian.org>  Fri, 19 Mar 2004 02:06:08 -0800
+
+libcrypto++ (5.1-3) unstable; urgency=low
+
+  * Move datatest.cpp from libcrypto++5.1.so to the cryptest source to
+    really fix the GlobalRNG bug,
+  Closes: #236539
+
+ -- Stephen Zander <gibreel@debian.org>  Sun, 14 Mar 2004 20:23:16 -0800
+
+libcrypto++ (5.1-2) unstable; urgency=low
+
+  * Remove validate.h from the libcrypto++5.1.so headers; it should only
+    be used by cryptest,
+  Closes: #236539
+  * Include test.cpp as an example of how to invoke the various Crypto++
+    routines,
+  Closes: #236844
+  * Allow cryptest to look for validation files in the current directory
+    as well as /usr/share/crypto++,
+  Closes: #236968
+
+ -- Stephen Zander <gibreel@debian.org>  Sat, 13 Mar 2004 00:59:54 -0800
+
+libcrypto++ (5.1-1) unstable; urgency=low
+
+  * Drop the gcc-3.2 dependency as gcc-3.2 should be everywhere by now.  This
+    also fixes the build failure on ARM.
+  * Rename the library from libcrypto++.so.5 to libcrypto++5.1.so.0 as
+    upstream does not maintain binary compatibility and having the 5.1
+    package provide libcrypto++.so.6 strikes me as too confusing.
+  * New upstream version,
+  Closes: #213953
+  * Include full paths to data files used by the cryptest validation
+    routines,
+  Closes: #198696
+  * Add MD4 to the output of 'cryptest b' and segregate the hashing
+    algorithms from the encryption algorithms,
+  Closes: #198698
+  * Include Doxygen generated documents in the libcrypto++-dev package,
+  Closes: #211725
+
+ -- Stephen Zander <gibreel@debian.org>  Tue, 17 Feb 2004 12:41:29 -0800
+
+libcrypto++ (5.0-3) unstable; urgency=low
+
+  * Add generic 64bit arch support, rather than hard-coded alpha supoprt,
+  Closes: #181457
+
+ -- Stephen Zander <gibreel@debian.org>  Sat, 15 Mar 2003 17:47:27 -0800
+
+libcrypto++ (5.0-2) unstable; urgency=low
+
+  * Convert the gcc-3.2 build depends to a g++-3.2, they way it should be
+  Closes: #175085
+  * Clean up cryptlib.h slightly so it's not so noisy under -Wall,
+  Closes: #175180
+
+ -- Stephen Zander <gibreel@debian.org>  Tue,  7 Jan 2003 01:24:07 -0800
+
+libcrypto++ (5.0-1) unstable; urgency=low
+
+  * Package moved to main.
+  * New upstream version,
+  Closes: #174217
+  * All files now have appropriate copyright entries and debian/copyright
+    accurately reflects the contents of this package,
+  Closes: #153926
+  * cryptest now successfully runs to completion,
+  Closes: #153929
+  * Fix a typo in the cryptest manpage,
+  Closes: #153932
+
+ -- Stephen Zander <gibreel@debian.org>  Fri, 27 Dec 2002 11:23:06 -0800
+
+libcrypto++ (4.2-1) unstable; urgency=low
+
+  * New package,
+  Closes: #79131
+
+ -- Stephen Zander <gibreel@debian.org>  Fri,  5 Jul 2002 09:45:26 -0700
+
--- libcrypto++-5.5.2.orig/debian/configure.ac
+++ libcrypto++-5.5.2/debian/configure.ac
@@ -0,0 +1,43 @@
+# -*- autoconf -*-
+# Process this file with autoconf to produce a configure script.
+# Written by Jens Peter Secher <jps@debian.org>.
+
+AC_INIT([Crypto++], [5.5.2], [libcrypto++@bugs.debian.org])
+AC_CONFIG_SRCDIR([cryptlib.h])
+AC_CONFIG_HEADERS([cryptopp_config.h])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE([foreign])
+AM_MAINTAINER_MODE
+
+# Checks for programs.
+AC_PROG_CXX
+AC_PROG_CC
+AC_PROG_LN_S
+AC_PROG_LIBTOOL
+
+# Checks for header files.
+AC_HEADER_STDC
+AC_CHECK_HEADERS([arpa/inet.h fcntl.h limits.h malloc.h netdb.h netinet/in.h stddef.h stdlib.h string.h sys/ioctl.h sys/socket.h sys/time.h unistd.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_HEADER_STDBOOL
+AC_C_CONST
+AC_C_INLINE
+AC_TYPE_SIZE_T
+AC_HEADER_TIME
+AC_CHECK_TYPES([ptrdiff_t])
+AC_C_BIGENDIAN(
+	AC_DEFINE(IS_BIG_ENDIAN, [], [Big-endian architecture]),
+	AC_DEFINE(IS_LITTLE_ENDIAN, [], [Little-endian architecture]),
+	AC_MSG_ERROR([Can't tell endianess of platform]))
+
+# Checks for library functions.
+AC_PROG_GCC_TRADITIONAL
+AC_FUNC_MALLOC
+AC_FUNC_MEMCMP
+AC_FUNC_SELECT_ARGTYPES
+AC_TYPE_SIGNAL
+AC_CHECK_FUNCS([gethostbyname gettimeofday memmove memset pow select socket])
+
+AC_CONFIG_FILES([Makefile libcrypto++.pc])
+AC_OUTPUT
--- libcrypto++-5.5.2.orig/debian/libcrypto++-utils.install
+++ libcrypto++-5.5.2/debian/libcrypto++-utils.install
@@ -0,0 +1,3 @@
+usr/bin/cryptest
+usr/share/crypto--/*.dat usr/share/crypto++
+usr/share/crypto--/TestVectors usr/share/crypto++
--- libcrypto++-5.5.2.orig/debian/libcrypto++-doc.docs
+++ libcrypto++-5.5.2/debian/libcrypto++-doc.docs
@@ -0,0 +1 @@
+doc/html/
